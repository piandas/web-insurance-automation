"""P√°gina de login espec√≠fica para Allianz."""

import asyncio
from playwright.async_api import Page
from ....shared.base_page import BasePage
from ....config.allianz_config import AllianzConfig
from typing import Optional

class LoginPage(BasePage):
    """P√°gina de login con sus selectores y m√©todos espec√≠ficos para Allianz."""
    
    # Selectores
    USERNAME_INPUT = "input[name='username']"
    PASSWORD_INPUT = "input[name='password']"
    SUBMIT_BUTTON = "button[type='submit']"
    
    def __init__(self, page: Page):
        super().__init__(page, 'allianz')
        self.config = AllianzConfig()

    async def navigate_to_login(self):
        """Navega a la p√°gina de login de Allianz o detecta si ya est√° logueado."""
        self.logger.info("üåê Navegando a p√°gina de login Allianz...")
        await self.page.goto(self.config.LOGIN_URL)
        try:
            current_url = self.page.url
            # Si ya est√° logueado, Allianz redirige a un dashboard o p√°gina interna
            if "login" not in current_url and "allianz" in current_url:
                self.logger.info("‚úÖ ¬°Ya est√°s logueado! (sesi√≥n activa desde perfil persistente)")
                return True
            # Si no est√° logueado, esperar a que aparezcan los elementos de login
            self.logger.info("‚úÖ P√°gina de login Allianz cargada correctamente")
            return False
        except Exception as e:
            self.logger.exception(f"‚ùå Error navegando a login Allianz: {e}")
            return False

    async def login(self, usuario: str, contrasena: str) -> bool:
        """Realiza el proceso de login en Allianz, usando perfil persistente si es posible."""
        self.logger.info("üîë Iniciando login en Allianz...")
        try:
            ya_logueado = await self.navigate_to_login()
            if ya_logueado:
                self.logger.info("üîì Sesi√≥n Allianz ya iniciada, saltando login.")
                return True
            
            # Llenar campos
            if not await self.safe_fill(self.USERNAME_INPUT, usuario):
                self.logger.error("‚ùå Error llenando usuario")
                return False
            if not await self.safe_fill(self.PASSWORD_INPUT, contrasena):
                self.logger.error("‚ùå Error llenando contrase√±a")
                return False
            
            # Hacer clic en submit con reintentos y verificaci√≥n de sesi√≥n
            return await self._login_with_retry()
            
        except Exception as e:
            self.logger.exception(f"‚ùå Error en login Allianz: {e}")
            return False

    async def _login_with_retry(self) -> bool:
        """Hace clic en el bot√≥n de login con reintentos y verifica que la sesi√≥n se inicie."""
        self.logger.info("üîê Iniciando proceso de login con verificaci√≥n...")
        
        for attempt in range(1, 6):  # 5 intentos m√°ximo
            try:
                if attempt > 1:
                    self.logger.info(f"üîÑ Intento {attempt}/5 - Haciendo clic en 'Iniciar sesi√≥n'")
                    await asyncio.sleep(2)  # Esperar 2 segundos entre intentos
                else:
                    self.logger.info("üîê Primer intento - Haciendo clic en 'Iniciar sesi√≥n'")
                
                # Hacer clic en el bot√≥n de submit
                if not await self.safe_click(self.SUBMIT_BUTTON):
                    self.logger.warning(f"‚ö†Ô∏è Intento {attempt}: No se pudo hacer clic en el bot√≥n")
                    continue
                
                # Verificar que el login fue exitoso
                if await self._verify_login_success():
                    self.logger.info(f"‚úÖ Login exitoso en intento {attempt}")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è Intento {attempt}: Login no completado, reintentando...")
                    continue
                    
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Error en intento {attempt}: {e}")
                if attempt == 5:
                    self.logger.error("‚ùå Todos los intentos de login fallaron")
                    return False
                continue
        
        self.logger.error("‚ùå No se pudo completar el login despu√©s de 5 intentos")
        return False

    async def _verify_login_success(self) -> bool:
        """Verifica que el login haya sido exitoso."""
        try:
            # Esperar a que cargue despu√©s del clic
            await asyncio.sleep(3)  # Tiempo para que procese el login
            
            # Verificar que la URL haya cambiado (indicando login exitoso)
            current_url = self.page.url
            
            # Si ya no est√° en la p√°gina de login, el login fue exitoso
            if "login" not in current_url.lower():
                self.logger.info("‚úÖ Login verificado: URL cambi√≥ (ya no est√° en login)")
                return True
            
            # Verificar si aparecieron elementos del dashboard o p√°gina interna
            dashboard_selectors = [
                'nav', 'header', '.dashboard', '#dashboard', 
                '[class*="dashboard"]', '[class*="main"]', 
                '.menu', '#menu', '[class*="menu"]'
            ]
            
            for selector in dashboard_selectors:
                if await self.is_visible_safe(selector, timeout=2000):
                    self.logger.info(f"‚úÖ Login verificado: Elemento del dashboard encontrado ({selector})")
                    return True
            
            # Verificar si desapareci√≥ el formulario de login
            login_form_visible = await self.is_visible_safe(self.SUBMIT_BUTTON, timeout=2000)
            if not login_form_visible:
                self.logger.info("‚úÖ Login verificado: Formulario de login desapareci√≥")
                return True
            
            self.logger.warning("‚ö†Ô∏è Login no verificado: A√∫n en p√°gina de login")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Error verificando login: {e}")
            return False
