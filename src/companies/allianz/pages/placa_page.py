"""P√°gina de placa espec√≠fica para Allianz."""

import datetime
import os
from playwright.async_api import Page
from ....shared.base_page import BasePage
from ....shared.utils import Utils
from ....config.allianz_config import AllianzConfig
from ....config.client_config import ClientConfig
from .fasecolda_page import FasecoldaPage

class PlacaPage(BasePage):
    # Selector para el input de valor asegurado en el iframe
    SELECTOR_INPUT_VALOR_ASEGURADO = 'input[name="DatosVehiculoIndividualBean$valorAsegurado"]'
    async def _get_input_value_by_id(self, frame, input_id):
        """Obtiene el valor de un input por su id dentro del frame dado."""
        try:
            input_elem = await frame.query_selector(f'input#{input_id}')
            if input_elem:
                return await input_elem.get_attribute('value')
        except Exception as e:
            self.logger.warning(f"No se pudo extraer el valor de {input_id}: {e}")
        return ''
    """P√°gina para manejo de placa y comprobaci√≥n en Allianz."""
    
    # Selectores
    SELECTOR_INPUT_PLACA = "#DatosVehiculoIndividualBean\\$matricula"
    SELECTOR_BTN_COMPROBAR = "#btnPlaca"
    SELECTOR_INPUT_PLACA_IN_IFRAME = 'input[name="DatosVehiculoIndividualBean$matricula"]'
    SELECTOR_CAMPO_VERIFICACION_IN_IFRAME = 'input[name="_CVH_VehicuCol$codigoClaveVeh"]'
    
    # Selectores para veh√≠culos nuevos (c√≥digo FASECOLDA)
    SELECTOR_CODIGO_FASECOLDA = "#_CVH_VehicuCol\\$codigoClaveVeh"
    SELECTOR_BTN_BUSCAR_VEHICULO = "#_CVH_VehicuCol\\$codigoClaveVeh_AjaxVehFinderImg"
    SELECTOR_VEHICULO_0KMS = "#DatosVehiculoIndividualBean\\$vehNuevo"
    SELECTOR_ANO_MODELO = "#VehicuCol\\$annoModelo"
    
    # Selectores para datos del asegurado
    SELECTOR_FECHA_NACIMIENTO = "#DatosAseguradoAutosBean\\$fechaNacimiento"
    SELECTOR_GENERO = "#DatosAseguradoAutosBean\\$idSexo"
    
    # Selectores para buscador de poblaciones
    SELECTOR_DEPARTAMENTO = "#idCity_1_node1"
    SELECTOR_BTN_BUSCAR_CIUDAD = "#idCity_1_node2AjaxFinderImg"
    SELECTOR_INPUT_CIUDAD = "#idCity_1_node2"
    SELECTOR_CODIGO_CIUDAD = "#idFinderCod"
    SELECTOR_LISTA_CIUDADES = "#div_loc_idCity_1"
    
    # Selectores para consulta y finalizaci√≥n
    SELECTOR_BTN_CONSULTAR_DTO = "#consultaWsBtn"
    SELECTOR_POLIZA_ANTECEDENTES = 'input[name="AntecedentesBean$poliza"]'
    SELECTOR_BTN_ACEPTAR = "#btnAceptar"
    SELECTOR_BTN_ARCHIVAR = "#btnArchivar"
    SELECTOR_BTN_ARCHIVAR_SEGUNDO = "#o_2"
    SELECTOR_ESTUDIO_SEGURO = "#doc0"

    def __init__(self, page: Page):
        super().__init__(page, 'allianz')
        self.config = AllianzConfig()
        self.fasecolda_page = FasecoldaPage(page)

    async def esperar_y_llenar_placa(self, placa: str = None) -> bool:
        """Espera el input de placa y lo llena."""
        # Usar el valor del config si no se proporciona uno espec√≠fico
        if placa is None:
            placa = ClientConfig.VEHICLE_PLATE
            
        self.logger.info(f"üìù Esperando y llenando input de placa con '{placa}'...")
        return await self.fill_in_frame(
            self.SELECTOR_INPUT_PLACA,
            placa,
            "input de placa"
        )

    async def verificar_input_ready(self) -> bool:
        """Verifica que el input de placa est√© listo y tenga el m√©todo getValue."""
        return await self.verify_element_value_in_frame(
            self.SELECTOR_INPUT_PLACA_IN_IFRAME,
            "input listo",
            condition="has_method_getValue",
            attempts=5,
            interval_ms=1000,
            immediate_check=False
        )

    async def click_comprobar_placa(self) -> bool:
        """Hace clic en el bot√≥n 'Comprobar' usando click_in_frame."""
        self.logger.info("üñ±Ô∏è Haciendo clic en bot√≥n 'Comprobar'...")
        if not await self.verificar_input_ready():
            return False
        if not await self.click_in_frame(self.SELECTOR_BTN_COMPROBAR, "bot√≥n 'Comprobar'"):
            return False
        # Pausa breve para que se procese
        await self.page.wait_for_timeout(2000)
        return True

    async def verificar_campo_lleno(self) -> bool:
        """Verifica que el campo de verificaci√≥n no est√© vac√≠o, esperando hasta 10s."""
        return await self.verify_element_value_in_frame(
            self.SELECTOR_CAMPO_VERIFICACION_IN_IFRAME,
            "campo de verificaci√≥n",
            condition="value_not_empty",
            attempts=20,
            interval_ms=1000,
            immediate_check=True
        )
    
    async def llenar_datos_asegurado(self, fecha_nacimiento: str = None, genero: str = None) -> bool:
        """
        Llena los datos del asegurado: fecha de nacimiento y g√©nero.
        
        Args:
            fecha_nacimiento (str): Fecha en formato dd/mm/yyyy (default: valor de Config)
            genero (str): G√©nero - M (Masculino), F (Femenino), J (Jur√≠dico) (default: valor de Config)
        
        Returns:
            bool: True si se llenaron los datos correctamente, False en caso contrario
        """
        # Usar valores del config si no se proporcionan espec√≠ficos
        if fecha_nacimiento is None:
            fecha_nacimiento = ClientConfig.get_client_birth_date('allianz')
        if genero is None:
            genero = ClientConfig.CLIENT_GENDER
        
        # Limpiar fecha de nacimiento usando Utils
        fecha_limpia = Utils.clean_date(fecha_nacimiento)
            
        self.logger.info(f"üë§ Llenando datos del asegurado - Fecha: {fecha_limpia}, G√©nero: {genero}")
        
        try:
            # Llenar fecha de nacimiento
            if not await self.fill_in_frame(
                self.SELECTOR_FECHA_NACIMIENTO,
                fecha_limpia,
                "fecha de nacimiento"
            ):
                self.logger.error("‚ùå Error al llenar fecha de nacimiento")
                return False
            
            # Seleccionar g√©nero
            if not await self.select_in_frame(
                self.SELECTOR_GENERO,
                genero,
                "g√©nero"
            ):
                self.logger.error("‚ùå Error al seleccionar g√©nero")
                return False
            
            #self.logger.info("‚úÖ Datos del asegurado llenados correctamente")
            # Llenar el campo valor asegurado recibido (siempre, nuevo o usado)
            #valor_asegurado = ClientConfig.VEHICLE_INSURED_VALUE_RECEIVED
            #self.logger.info(f"üíµ Llenando campo valor asegurado con '{valor_asegurado}'")
            #if not await self.fill_in_frame(
            #    self.SELECTOR_INPUT_VALOR_ASEGURADO,
            #    valor_asegurado,
            #    "valor asegurado"
            #):
            #    self.logger.error("‚ùå Error al llenar campo valor asegurado")
            #    return False
            #return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error al llenar datos del asegurado: {e}")
            return False

    async def buscador_poblaciones(self, departamento: str = None, ciudad: str = None) -> bool:
        """
        Busca y selecciona una poblaci√≥n espec√≠fica.
        
        Args:
            departamento (str): Nombre del departamento (default: valor de Config)
            ciudad (str): Nombre de la ciudad (default: valor de Config)
        
        Returns:
            bool: True si se seleccion√≥ la poblaci√≥n correctamente, False en caso contrario
        """
        # Usar valores del config si no se proporcionan espec√≠ficos
        if departamento is None:
            departamento = ClientConfig.CLIENT_DEPARTMENT
        if ciudad is None:
            ciudad = ClientConfig.get_client_city('allianz')
            
        self.logger.info(f"üèôÔ∏è Buscando poblaci√≥n - Departamento: {departamento}, Ciudad: {ciudad}")
        
        try:
            # Paso 1: Seleccionar departamento por texto
            if not await self.select_by_text_in_frame(
                self.SELECTOR_DEPARTAMENTO,
                departamento,
                f"departamento ({departamento})"
            ):
                self.logger.error("‚ùå Error al seleccionar departamento")
                return False
            
            # Pausa breve para que se procese la selecci√≥n
            await self.page.wait_for_timeout(1000)
            
            # Paso 2: Hacer clic en el bot√≥n de b√∫squeda
            if not await self.click_in_frame(
                self.SELECTOR_BTN_BUSCAR_CIUDAD,
                "bot√≥n de b√∫squeda de ciudad"
            ):
                self.logger.error("‚ùå Error al hacer clic en bot√≥n de b√∫squeda")
                return False
            
            # Paso 3: Llenar el campo de ciudad
            if not await self.fill_in_frame(
                self.SELECTOR_INPUT_CIUDAD,
                ciudad,
                f"campo de ciudad ({ciudad})"
            ):
                self.logger.error("‚ùå Error al llenar campo de ciudad")
                return False
            
            # Pausa para que aparezca la lista
            await self.page.wait_for_timeout(2000)
              
            # Paso 4: Buscar y hacer clic en la ciudad en la lista desplegable
            if not await self.click_by_text_in_frame(
                ciudad,
                f"ciudad '{ciudad}' en la lista"
            ):
                self.logger.error(f"‚ùå No se pudo encontrar la ciudad '{ciudad}' en la lista")
                return False
            
            # Pausa para que se procese la selecci√≥n
            await self.page.wait_for_timeout(2000)
            
            # Paso 5: Verificar que se llen√≥ el c√≥digo de ciudad
            codigo_resultado = await self.verify_element_value_in_frame(
                self.SELECTOR_CODIGO_CIUDAD,
                "c√≥digo de ciudad",
                condition="value_not_empty",
                attempts=5,
                interval_ms=1000,
                immediate_check=False
            )
            
            if codigo_resultado:
                self.logger.info(f"‚úÖ Poblaci√≥n seleccionada correctamente")
                return True
            else:
                self.logger.error("‚ùå No se encontr√≥ c√≥digo de ciudad despu√©s de la selecci√≥n")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Error en buscador de poblaciones: {e}")
            return False

    async def consultar_y_finalizar(self) -> bool:
        """
        Ejecuta la secuencia de consulta DTO y finalizaci√≥n del proceso.
        
        Returns:
            bool: True si se ejecut√≥ la secuencia correctamente, False en caso contrario
        """
        self.logger.info("üìã Iniciando consulta DTO y finalizaci√≥n...")
        
        try:
            # Paso 1: Hacer clic en "Consultar Dto"
            if not await self.click_in_frame(
                self.SELECTOR_BTN_CONSULTAR_DTO,
                "bot√≥n 'Consultar Dto'"
            ):
                self.logger.error("‚ùå Error al hacer clic en 'Consultar Dto'")
                return False
            
            # Pausa para que se procese la consulta
            await self.page.wait_for_timeout(3000)
            
            # Paso 2: Verificar que el campo de p√≥liza tenga valor
            if not await self.verify_element_value_in_frame(
                self.SELECTOR_POLIZA_ANTECEDENTES,
                "campo de p√≥liza antecedentes",
                condition="value_not_empty",
                attempts=10,
                interval_ms=1000,
                immediate_check=False
            ):
                self.logger.error("‚ùå El campo de p√≥liza no se llen√≥ despu√©s de la consulta")
                return False
            
            # Paso 3: Clic en "Siguiente" (solo una vez si es veh√≠culo nuevo)
            from ....config.client_config import ClientConfig
            if ClientConfig.VEHICLE_STATE.lower() == 'nuevo':
                if not await self.click_in_frame(
                    self.SELECTOR_BTN_ACEPTAR,
                    "bot√≥n 'Siguiente' (√∫nico clic para nuevo)"
                ):
                    self.logger.error("‚ùå Error al hacer clic en 'Siguiente' (veh√≠culo nuevo)")
                    return False
                # Pausa para que aparezca el bot√≥n Archivar
                await self.page.wait_for_timeout(3000)
                await self.wait_for_iframe_content()
            else:
                # Primer clic en Siguiente
                if not await self.click_in_frame(
                    self.SELECTOR_BTN_ACEPTAR,
                    "bot√≥n 'Siguiente' (primera vez)"
                ):
                    self.logger.error("‚ùå Error al hacer clic en primer 'Siguiente'")
                    return False
                await self.page.wait_for_timeout(3000)
                await self.wait_for_iframe_content()
                # Segundo clic en Siguiente
                if not await self.click_in_frame(
                    self.SELECTOR_BTN_ACEPTAR,
                    "bot√≥n 'Siguiente' (segunda vez)"
                ):
                    self.logger.error("‚ùå Error al hacer clic en segundo 'Siguiente'")
                    return False
                await self.page.wait_for_timeout(3000)
                await self.wait_for_iframe_content()
            
            # Paso 5: Verificar que aparezca el bot√≥n "Archivar"
            if not await self.verify_element_value_in_frame(
                self.SELECTOR_BTN_ARCHIVAR,
                "bot√≥n 'Archivar'",
                condition="is_visible",
                attempts=10,
                interval_ms=1000,
                immediate_check=False
            ):
                self.logger.error("‚ùå El bot√≥n 'Archivar' no apareci√≥")
                return False
            
            # Paso 6: Hacer clic en el primer bot√≥n "Archivar"
            if not await self.click_in_frame(
                self.SELECTOR_BTN_ARCHIVAR,
                "primer bot√≥n 'Archivar'"
            ):
                self.logger.error("‚ùå Error al hacer clic en primer bot√≥n 'Archivar'")
                return False
            
            # Pausa para que aparezca el segundo bot√≥n
            await self.page.wait_for_timeout(3000)
            
            # Paso 7: Esperar y hacer clic en el segundo bot√≥n "Archivar"
            if not await self.verify_element_value_in_frame(
                self.SELECTOR_BTN_ARCHIVAR_SEGUNDO,
                "segundo bot√≥n 'Archivar'",
                condition="is_visible",
                attempts=10,
                interval_ms=1000,
                immediate_check=False
            ):
                self.logger.error("‚ùå El segundo bot√≥n 'Archivar' no apareci√≥")
                return False
            
            if not await self.click_in_frame(
                self.SELECTOR_BTN_ARCHIVAR_SEGUNDO,
                "segundo bot√≥n 'Archivar'"
            ):
                self.logger.error("‚ùå Error al hacer clic en segundo bot√≥n 'Archivar'")
                return False
            
            # Paso 8: Manejar alert de confirmaci√≥n
            try:
                await self.page.wait_for_timeout(2000)  # Esperar que aparezca el alert
                # Aceptar el alert autom√°ticamente
                await self.page.on("dialog", lambda dialog: dialog.accept())
                self.logger.info("‚úÖ Alert de confirmaci√≥n aceptado")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è No se detect√≥ alert o ya fue manejado: {e}")
            
            # Paso 9: EXTRAER VALORES DE LA P√ÅGINA (antes de abrir el PDF)
            await self.page.wait_for_timeout(3000)
            try:
                frame = self.page.frame(name="appArea")
                # 1. N√∫mero de cotizaci√≥n
                cotiz_td = await frame.query_selector('td.rowAppErrorInfoTextBlock.cellNoImage')
                cotiz_text = await cotiz_td.inner_text() if cotiz_td else ''
                num_cotizacion = ''
                import re
                m = re.search(r'n√∫mero (\d+)', cotiz_text)
                if m:
                    num_cotizacion = m.group(1)
                self.logger.info(f"[EXTRACCI√ìN] N√∫mero de cotizaci√≥n: {num_cotizacion}")

                # 2. Autos Esencial (modalidad_1_0_primaRecibo)
                autos_esencial = await self._get_input_value_by_id(frame, "modalidad_1_0_primaRecibo")
                self.logger.info(f"[EXTRACCI√ìN] Autos Esencial: {autos_esencial}")

                # 3. Autos Plus (modalidad_2_0_primaRecibo)
                autos_plus = await self._get_input_value_by_id(frame, "modalidad_2_0_primaRecibo")
                self.logger.info(f"[EXTRACCI√ìN] Autos Plus: {autos_plus}")

                # 4. Autos Llave en Mano (modalidad_3_0_primaRecibo)
                autos_llave = await self._get_input_value_by_id(frame, "modalidad_3_0_primaRecibo")
                self.logger.info(f"[EXTRACCI√ìN] Autos Llave en Mano: {autos_llave}")

                # Si necesitas el valor de "Autos Esencial + Totales", puedes agregar l√≥gica similar aqu√≠ si hay un campo espec√≠fico
            except Exception as e:
                self.logger.error(f"‚ùå Error extrayendo valores de la p√°gina: {e}")
            # Paso 10: Esperar y hacer clic en "Estudio de Seguro"
            if not await self.verify_element_value_in_frame(
                self.SELECTOR_ESTUDIO_SEGURO,
                "enlace 'Estudio de Seguro'",
                condition="is_visible",
                attempts=15,
                interval_ms=1000,
                immediate_check=False
            ):
                self.logger.error("‚ùå El enlace 'Estudio de Seguro' no apareci√≥")
                return False
            if not await self.click_in_frame(
                self.SELECTOR_ESTUDIO_SEGURO,
                "enlace 'Estudio de Seguro'"
            ):
                self.logger.error("‚ùå Error al hacer clic en 'Estudio de Seguro'")
                return False
            
            # Paso 10: Descargar PDF directamente desde la URL
            self.logger.info("üåê Detectando nueva pesta√±a con el PDF...")
            nuevo_popup = await self.page.context.wait_for_event("page")
            await nuevo_popup.wait_for_load_state("networkidle")

            pdf_url = nuevo_popup.url
            self.logger.info(f"üîó URL del PDF: {pdf_url}")

            # Descargar v√≠a API de Playwright (m√°s fiable que interactuar con el visor)
            response = await self.page.context.request.get(pdf_url)
            if not response.ok:
                self.logger.error(f"‚ùå Fall√≥ la descarga del PDF (status {response.status})")
                return False

            # Generar nombre de archivo usando Utils
            nombre = Utils.generate_filename('allianz', 'Cotizacion')
            
            # Usar el directorio de descargas espec√≠fico de Allianz
            downloads_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))), 'downloads', 'allianz')
            Utils.ensure_directory(downloads_dir)
            
            ruta = os.path.join(downloads_dir, nombre)
            with open(ruta, "wb") as f:
                f.write(await response.body())
            self.logger.info(f"‚úÖ PDF de Allianz guardado en {ruta}")

            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en consulta y finalizaci√≥n de Allianz: {e}")
            return False
    
    # M√©todos espec√≠ficos para veh√≠culos nuevos (c√≥digo FASECOLDA)
    async def llenar_codigo_fasecolda(self) -> bool:
        """Llena el campo del c√≥digo FASECOLDA dentro del iframe 'appArea'."""
        self.logger.info("üìã Obteniendo y llenando c√≥digo FASECOLDA en iframe 'appArea'...")
        try:
            # Obtener c√≥digos FASECOLDA del extractor global
            codes = await self.fasecolda_page.get_fasecolda_code()
            if not codes or not codes.get('cf_code'):
                self.logger.error("‚ùå No se pudo obtener c√≥digo FASECOLDA")
                return False
            cf_code = codes['cf_code']
            self.logger.info(f"üìù Llenando c√≥digo FASECOLDA: {cf_code}")

            # Seleccionar el iframe 'appArea' y llenar el campo
            for intento in range(1, 6):
                try:
                    frame = self.page.frame(name="appArea")
                    if not frame:
                        self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ el iframe 'appArea' (intento {intento})")
                        await self.page.wait_for_timeout(1000)
                        continue
                    await frame.fill(self.SELECTOR_CODIGO_FASECOLDA, cf_code)
                    # Verificar que el campo se llen√≥ correctamente
                    valor = await frame.input_value(self.SELECTOR_CODIGO_FASECOLDA)
                    if valor == cf_code:
                        self.logger.info("‚úÖ C√≥digo FASECOLDA llenado correctamente en el iframe")
                        return True
                    else:
                        self.logger.warning(f"‚ö†Ô∏è El campo no se llen√≥ correctamente (intento {intento})")
                        await self.page.wait_for_timeout(1000)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Error llenando el campo en el iframe (intento {intento}): {e}")
                    await self.page.wait_for_timeout(1000)
            self.logger.error("‚ùå No se pudo llenar el campo C√≥digo FASECOLDA en el iframe despu√©s de varios intentos")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error llenando c√≥digo FASECOLDA: {e}")
            return False
    
    async def click_buscar_vehiculo(self) -> bool:
        """Hace clic en la lupa (bot√≥n buscar veh√≠culo) dentro del iframe 'appArea' hasta que el select de marca tenga opciones. Luego llena la placa con 'XXX123' si es veh√≠culo nuevo."""
        self.logger.info("üîç Haciendo clic en buscar veh√≠culo (lupa) en el iframe 'appArea' hasta que aparezca marca...")
        try:
            for intento in range(1, 11):
                frame = self.page.frame(name="appArea")
                if not frame:
                    self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ el iframe 'appArea' (intento {intento})")
                    await self.page.wait_for_timeout(1000)
                    continue
                boton_lupa = await frame.query_selector('#_CVH_VehicuCol\\$codigoClaveVeh_AjaxVehFinderImg')
                if not boton_lupa:
                    self.logger.warning(f"[Depuraci√≥n] No se encontr√≥ el bot√≥n lupa en el DOM del iframe (intento {intento})")
                    await self.page.wait_for_timeout(1000)
                    continue
                is_visible = await boton_lupa.is_visible()
                is_enabled = await boton_lupa.is_enabled()
                self.logger.info(f"[Depuraci√≥n] Estado del bot√≥n lupa: visible={is_visible}, enabled={is_enabled}")
                try:
                    await boton_lupa.click()
                    self.logger.info(f"[Depuraci√≥n] Click en la lupa ejecutado (intento {intento})")
                except Exception as click_error:
                    self.logger.error(f"[Depuraci√≥n] Error al hacer click en la lupa: {click_error}")
                    await self.page.wait_for_timeout(1000)
                    continue
                await self.page.wait_for_timeout(800)
                # Verificar si el select de marca tiene opciones v√°lidas
                select_marca = await frame.query_selector('select#_M_VehicuCol\\$marca')
                if select_marca:
                    options = await select_marca.query_selector_all('option')
                    opciones_validas = [await o.get_attribute('value') for o in options if (await o.get_attribute('value')) and (await o.get_attribute('value')).strip()]
                    if len(opciones_validas) > 0:
                        self.logger.info(f"‚úÖ ¬°Marca disponible tras {intento} clic(s)! Opciones: {opciones_validas[:5]}...")
                        # Si el veh√≠culo es nuevo, llenar la placa con 'XXX123' en el mismo iframe
                        from ....config.client_config import ClientConfig
                        if ClientConfig.VEHICLE_STATE.lower() == 'nuevo':
                            try:
                                await frame.fill(self.SELECTOR_INPUT_PLACA, 'XXX123')
                                self.logger.info("‚úÖ Placa gen√©rica 'XXX123' llenada correctamente en el iframe tras la lupa")
                            except Exception as e:
                                self.logger.warning(f"‚ö†Ô∏è No se pudo llenar la placa gen√©rica en el iframe: {e}")
                        return True
                self.logger.info(f"[Depuraci√≥n] Marca a√∫n no disponible tras {intento} clic(s)")
            self.logger.error("‚ùå No se pudo obtener la marca tras 10 clics en la lupa. El campo marca sigue vac√≠o o sin opciones v√°lidas.")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error haciendo clic en buscar veh√≠culo: {e}")
            return False
    
    async def seleccionar_vehiculo_0kms(self) -> bool:
        """Selecciona la opci√≥n 'S√≠' de veh√≠culo 0kms dentro del iframe 'appArea'."""
        self.logger.info("üÜï Seleccionando veh√≠culo 0kms (S√≠) en el iframe 'appArea'...")
        try:
            await self.page.wait_for_timeout(2000)
            for intento in range(1, 6):
                try:
                    frame = self.page.frame(name="appArea")
                    if not frame:
                        self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ el iframe 'appArea' (intento {intento})")
                        await self.page.wait_for_timeout(1000)
                        continue
                    await frame.click('input#DatosVehiculoIndividualBean\\$vehNuevo[value="true"]')
                    self.logger.info("‚úÖ Opci√≥n 'S√≠' de 0kms seleccionada correctamente en el iframe")
                    return True
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Error seleccionando 0kms en el iframe (intento {intento}): {e}")
                    await self.page.wait_for_timeout(1000)
            self.logger.error("‚ùå No se pudo seleccionar 0kms en el iframe despu√©s de varios intentos")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error seleccionando veh√≠culo 0kms: {e}")
            return False
    
    async def llenar_ano_modelo(self) -> bool:
        """Llena el a√±o del modelo del veh√≠culo dentro del iframe 'appArea'."""
        ano_modelo = ClientConfig.VEHICLE_MODEL_YEAR
        self.logger.info(f"üìÖ Llenando a√±o del modelo: {ano_modelo}")
        for intento in range(1, 6):
            self.logger.info(f"üìù A√±o del modelo - Intento {intento}/5")
            try:
                frame = self.page.frame(name="appArea")
                if not frame:
                    self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ el iframe 'appArea' (intento {intento})")
                    await self.page.wait_for_timeout(1000)
                    continue
                await frame.fill(self.SELECTOR_ANO_MODELO, ano_modelo)
                valor = await frame.input_value(self.SELECTOR_ANO_MODELO)
                if valor == ano_modelo:
                    self.logger.info("‚úÖ A√±o del modelo llenado correctamente en el iframe")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è El campo a√±o modelo no se llen√≥ correctamente (intento {intento})")
                    await self.page.wait_for_timeout(1000)
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è A√±o del modelo - Error en intento {intento}: {e}")
                await self.page.wait_for_timeout(2000)
        self.logger.error("‚ùå No se pudo llenar el a√±o del modelo en el iframe despu√©s de 5 intentos")
        return False
        
    async def execute_placa_flow(self, placa: str = None, fecha_nacimiento: str = None, genero: str = None, departamento: str = None, ciudad: str = None) -> bool:
        """Ejecuta el flujo completo desde placa hasta finalizaci√≥n en Allianz."""
        # Decidir qu√© flujo usar seg√∫n el estado del veh√≠culo
        if ClientConfig.VEHICLE_STATE == 'Nuevo':
            self.logger.info("üÜï Veh√≠culo NUEVO detectado - usando flujo con c√≥digo FASECOLDA")
            return await self.execute_vehiculo_nuevo_flow(fecha_nacimiento, genero, departamento, ciudad)
        else:
            self.logger.info("üîÑ Veh√≠culo USADO detectado - usando flujo tradicional con placa")
            return await self.execute_vehiculo_usado_flow(placa, fecha_nacimiento, genero, departamento, ciudad)
    
    async def execute_vehiculo_usado_flow(self, placa: str = None, fecha_nacimiento: str = None, genero: str = None, departamento: str = None, ciudad: str = None) -> bool:
        """Ejecuta el flujo para veh√≠culos usados (flujo tradicional con placa)."""
        # Usar valores del config si no se proporcionan espec√≠ficos
        if placa is None:
            placa = ClientConfig.VEHICLE_PLATE
        if fecha_nacimiento is None:
            fecha_nacimiento = ClientConfig.get_client_birth_date('allianz')
        if genero is None:
            genero = ClientConfig.CLIENT_GENDER
        if departamento is None:
            departamento = ClientConfig.CLIENT_DEPARTMENT
        if ciudad is None:
            ciudad = ClientConfig.get_client_city('allianz')
            
        self.logger.info(f"üöó Iniciando flujo de veh√≠culo USADO con placa '{placa}', ciudad '{ciudad}'...")
        steps = [
            self.esperar_y_llenar_placa,
            self.click_comprobar_placa,
            self.verificar_campo_lleno,
            self.llenar_datos_asegurado,
            self.buscador_poblaciones,
            self.consultar_y_finalizar
        ]
        try:
            for i, step in enumerate(steps, 1):
                self.logger.info(f"üìã Ejecutando paso {i}/{len(steps)}...")
                if not await step():
                    self.logger.error(f"‚ùå Fall√≥ el paso {i}")
                    return False
            self.logger.info("‚úÖ ¬°FLUJO DE VEH√çCULO USADO EXITOSO!")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Error en flujo de veh√≠culo usado: {e}")
            return False
    
    async def execute_vehiculo_nuevo_flow(self, fecha_nacimiento: str = None, genero: str = None, departamento: str = None, ciudad: str = None) -> bool:
        """Ejecuta el flujo para veh√≠culos nuevos (con c√≥digo FASECOLDA)."""
        # Usar valores del config si no se proporcionan espec√≠ficos
        if fecha_nacimiento is None:
            fecha_nacimiento = ClientConfig.get_client_birth_date('allianz')
        if genero is None:
            genero = ClientConfig.CLIENT_GENDER
        if departamento is None:
            departamento = ClientConfig.CLIENT_DEPARTMENT
        if ciudad is None:
            ciudad = ClientConfig.get_client_city('allianz')
            
        self.logger.info(f"üÜï Iniciando flujo de veh√≠culo NUEVO con c√≥digo FASECOLDA, ciudad '{ciudad}'...")
        steps = [
            self.llenar_codigo_fasecolda,
            self.click_buscar_vehiculo,
            self.seleccionar_vehiculo_0kms,
            self.llenar_ano_modelo,
            self.llenar_datos_asegurado,
            self.buscador_poblaciones,
            self.consultar_y_finalizar
        ]
        try:
            for i, step in enumerate(steps, 1):
                self.logger.info(f"üìã Ejecutando paso {i}/{len(steps)}...")
                if not await step():
                    self.logger.error(f"‚ùå Fall√≥ el paso {i}")
                    return False
            self.logger.info("‚úÖ ¬°FLUJO DE VEH√çCULO NUEVO EXITOSO!")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Error en flujo de veh√≠culo nuevo: {e}")
            return False
