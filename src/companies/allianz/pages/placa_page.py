"""P√°gina de placa espec√≠fica para Allianz."""

import datetime
import os
from playwright.async_api import Page
from ....shared.base_page import BasePage
from ....shared.utils import Utils
from ....config.allianz_config import AllianzConfig

class PlacaPage(BasePage):
    """P√°gina para manejo de placa y comprobaci√≥n en Allianz."""
    
    # Selectores
    SELECTOR_INPUT_PLACA = "#DatosVehiculoIndividualBean\\$matricula"
    SELECTOR_BTN_COMPROBAR = "#btnPlaca"
    SELECTOR_INPUT_PLACA_IN_IFRAME = 'input[name="DatosVehiculoIndividualBean$matricula"]'
    SELECTOR_CAMPO_VERIFICACION_IN_IFRAME = 'input[name="_CVH_VehicuCol$codigoClaveVeh"]'
    
    # Selectores para datos del asegurado
    SELECTOR_FECHA_NACIMIENTO = "#DatosAseguradoAutosBean\\$fechaNacimiento"
    SELECTOR_GENERO = "#DatosAseguradoAutosBean\\$idSexo"
    
    # Selectores para buscador de poblaciones
    SELECTOR_DEPARTAMENTO = "#idCity_1_node1"
    SELECTOR_BTN_BUSCAR_CIUDAD = "#idCity_1_node2AjaxFinderImg"
    SELECTOR_INPUT_CIUDAD = "#idCity_1_node2"
    SELECTOR_CODIGO_CIUDAD = "#idFinderCod"
    SELECTOR_LISTA_CIUDADES = "#div_loc_idCity_1"
    
    # Selectores para consulta y finalizaci√≥n
    SELECTOR_BTN_CONSULTAR_DTO = "#consultaWsBtn"
    SELECTOR_POLIZA_ANTECEDENTES = 'input[name="AntecedentesBean$poliza"]'
    SELECTOR_BTN_ACEPTAR = "#btnAceptar"
    SELECTOR_BTN_ARCHIVAR = "#btnArchivar"
    SELECTOR_BTN_ARCHIVAR_SEGUNDO = "#o_2"
    SELECTOR_ESTUDIO_SEGURO = "#doc0"

    def __init__(self, page: Page):
        super().__init__(page, 'allianz')
        self.config = AllianzConfig()

    async def esperar_y_llenar_placa(self, placa: str = None) -> bool:
        """Espera el input de placa y lo llena."""
        # Usar el valor del config si no se proporciona uno espec√≠fico
        if placa is None:
            placa = self.config.PLACA_VEHICULO
            
        self.logger.info(f"üìù Esperando y llenando input de placa con '{placa}'...")
        return await self.fill_in_frame(
            self.SELECTOR_INPUT_PLACA,
            placa,
            "input de placa"
        )

    async def verificar_input_ready(self) -> bool:
        """Verifica que el input de placa est√© listo y tenga el m√©todo getValue."""
        return await self.verify_element_value_in_frame(
            self.SELECTOR_INPUT_PLACA_IN_IFRAME,
            "input listo",
            condition="has_method_getValue",
            attempts=5,
            interval_ms=1000,
            immediate_check=False
        )

    async def click_comprobar_placa(self) -> bool:
        """Hace clic en el bot√≥n 'Comprobar' usando click_in_frame."""
        self.logger.info("üñ±Ô∏è Haciendo clic en bot√≥n 'Comprobar'...")
        if not await self.verificar_input_ready():
            return False
        if not await self.click_in_frame(self.SELECTOR_BTN_COMPROBAR, "bot√≥n 'Comprobar'"):
            return False
        # Pausa breve para que se procese
        await self.page.wait_for_timeout(2000)
        return True

    async def verificar_campo_lleno(self) -> bool:
        """Verifica que el campo de verificaci√≥n no est√© vac√≠o, esperando hasta 10s."""
        return await self.verify_element_value_in_frame(
            self.SELECTOR_CAMPO_VERIFICACION_IN_IFRAME,
            "campo de verificaci√≥n",
            condition="value_not_empty",
            attempts=20,
            interval_ms=1000,
            immediate_check=True
        )
    
    async def llenar_datos_asegurado(self, fecha_nacimiento: str = None, genero: str = None) -> bool:
        """
        Llena los datos del asegurado: fecha de nacimiento y g√©nero.
        
        Args:
            fecha_nacimiento (str): Fecha en formato dd/mm/yyyy (default: valor de Config)
            genero (str): G√©nero - M (Masculino), F (Femenino), J (Jur√≠dico) (default: valor de Config)
        
        Returns:
            bool: True si se llenaron los datos correctamente, False en caso contrario
        """
        # Usar valores del config si no se proporcionan espec√≠ficos
        if fecha_nacimiento is None:
            fecha_nacimiento = self.config.FECHA_NACIMIENTO
        if genero is None:
            genero = self.config.GENERO_ASEGURADO
        
        # Limpiar fecha de nacimiento usando Utils
        fecha_limpia = Utils.clean_date(fecha_nacimiento)
            
        self.logger.info(f"üë§ Llenando datos del asegurado - Fecha: {fecha_limpia}, G√©nero: {genero}")
        
        try:
            # Llenar fecha de nacimiento
            if not await self.fill_in_frame(
                self.SELECTOR_FECHA_NACIMIENTO,
                fecha_limpia,
                "fecha de nacimiento"
            ):
                self.logger.error("‚ùå Error al llenar fecha de nacimiento")
                return False
            
            # Seleccionar g√©nero
            if not await self.select_in_frame(
                self.SELECTOR_GENERO,
                genero,
                "g√©nero"
            ):
                self.logger.error("‚ùå Error al seleccionar g√©nero")
                return False
            
            self.logger.info("‚úÖ Datos del asegurado llenados correctamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error al llenar datos del asegurado: {e}")
            return False

    async def buscador_poblaciones(self, departamento: str = None, ciudad: str = None) -> bool:
        """
        Busca y selecciona una poblaci√≥n espec√≠fica.
        
        Args:
            departamento (str): Nombre del departamento (default: valor de Config)
            ciudad (str): Nombre de la ciudad (default: valor de Config)
        
        Returns:
            bool: True si se seleccion√≥ la poblaci√≥n correctamente, False en caso contrario
        """
        # Usar valores del config si no se proporcionan espec√≠ficos
        if departamento is None:
            departamento = self.config.DEPARTAMENTO
        if ciudad is None:
            ciudad = self.config.CIUDAD
            
        self.logger.info(f"üèôÔ∏è Buscando poblaci√≥n - Departamento: {departamento}, Ciudad: {ciudad}")
        
        try:
            # Paso 1: Seleccionar departamento por texto
            if not await self.select_by_text_in_frame(
                self.SELECTOR_DEPARTAMENTO,
                departamento,
                f"departamento ({departamento})"
            ):
                self.logger.error("‚ùå Error al seleccionar departamento")
                return False
            
            # Pausa breve para que se procese la selecci√≥n
            await self.page.wait_for_timeout(1000)
            
            # Paso 2: Hacer clic en el bot√≥n de b√∫squeda
            if not await self.click_in_frame(
                self.SELECTOR_BTN_BUSCAR_CIUDAD,
                "bot√≥n de b√∫squeda de ciudad"
            ):
                self.logger.error("‚ùå Error al hacer clic en bot√≥n de b√∫squeda")
                return False
            
            # Paso 3: Llenar el campo de ciudad
            if not await self.fill_in_frame(
                self.SELECTOR_INPUT_CIUDAD,
                ciudad,
                f"campo de ciudad ({ciudad})"
            ):
                self.logger.error("‚ùå Error al llenar campo de ciudad")
                return False
            
            # Pausa para que aparezca la lista
            await self.page.wait_for_timeout(2000)
              
            # Paso 4: Buscar y hacer clic en la ciudad en la lista desplegable
            if not await self.click_by_text_in_frame(
                ciudad,
                f"ciudad '{ciudad}' en la lista"
            ):
                self.logger.error(f"‚ùå No se pudo encontrar la ciudad '{ciudad}' en la lista")
                return False
            
            # Pausa para que se procese la selecci√≥n
            await self.page.wait_for_timeout(2000)
            
            # Paso 5: Verificar que se llen√≥ el c√≥digo de ciudad
            codigo_resultado = await self.verify_element_value_in_frame(
                self.SELECTOR_CODIGO_CIUDAD,
                "c√≥digo de ciudad",
                condition="value_not_empty",
                attempts=5,
                interval_ms=1000,
                immediate_check=False
            )
            
            if codigo_resultado:
                self.logger.info(f"‚úÖ Poblaci√≥n seleccionada correctamente")
                return True
            else:
                self.logger.error("‚ùå No se encontr√≥ c√≥digo de ciudad despu√©s de la selecci√≥n")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Error en buscador de poblaciones: {e}")
            return False

    async def consultar_y_finalizar(self) -> bool:
        """
        Ejecuta la secuencia de consulta DTO y finalizaci√≥n del proceso.
        
        Returns:
            bool: True si se ejecut√≥ la secuencia correctamente, False en caso contrario
        """
        self.logger.info("üìã Iniciando consulta DTO y finalizaci√≥n...")
        
        try:
            # Paso 1: Hacer clic en "Consultar Dto"
            if not await self.click_in_frame(
                self.SELECTOR_BTN_CONSULTAR_DTO,
                "bot√≥n 'Consultar Dto'"
            ):
                self.logger.error("‚ùå Error al hacer clic en 'Consultar Dto'")
                return False
            
            # Pausa para que se procese la consulta
            await self.page.wait_for_timeout(3000)
            
            # Paso 2: Verificar que el campo de p√≥liza tenga valor
            if not await self.verify_element_value_in_frame(
                self.SELECTOR_POLIZA_ANTECEDENTES,
                "campo de p√≥liza antecedentes",
                condition="value_not_empty",
                attempts=10,
                interval_ms=1000,
                immediate_check=False
            ):
                self.logger.error("‚ùå El campo de p√≥liza no se llen√≥ despu√©s de la consulta")
                return False
            
            # Paso 3: Primer clic en "Siguiente"
            if not await self.click_in_frame(
                self.SELECTOR_BTN_ACEPTAR,
                "bot√≥n 'Siguiente' (primera vez)"
            ):
                self.logger.error("‚ùå Error al hacer clic en primer 'Siguiente'")
                return False
            
            # Pausa para que cargue el frame
            await self.page.wait_for_timeout(3000)
            await self.wait_for_iframe_content()
            
            # Paso 4: Segundo clic en "Siguiente"
            if not await self.click_in_frame(
                self.SELECTOR_BTN_ACEPTAR,
                "bot√≥n 'Siguiente' (segunda vez)"
            ):
                self.logger.error("‚ùå Error al hacer clic en segundo 'Siguiente'")
                return False
            
            # Pausa para que aparezca el bot√≥n Archivar
            await self.page.wait_for_timeout(3000)
            await self.wait_for_iframe_content()
            
            # Paso 5: Verificar que aparezca el bot√≥n "Archivar"
            if not await self.verify_element_value_in_frame(
                self.SELECTOR_BTN_ARCHIVAR,
                "bot√≥n 'Archivar'",
                condition="is_visible",
                attempts=10,
                interval_ms=1000,
                immediate_check=False
            ):
                self.logger.error("‚ùå El bot√≥n 'Archivar' no apareci√≥")
                return False
            
            # Paso 6: Hacer clic en el primer bot√≥n "Archivar"
            if not await self.click_in_frame(
                self.SELECTOR_BTN_ARCHIVAR,
                "primer bot√≥n 'Archivar'"
            ):
                self.logger.error("‚ùå Error al hacer clic en primer bot√≥n 'Archivar'")
                return False
            
            # Pausa para que aparezca el segundo bot√≥n
            await self.page.wait_for_timeout(3000)
            
            # Paso 7: Esperar y hacer clic en el segundo bot√≥n "Archivar"
            if not await self.verify_element_value_in_frame(
                self.SELECTOR_BTN_ARCHIVAR_SEGUNDO,
                "segundo bot√≥n 'Archivar'",
                condition="is_visible",
                attempts=10,
                interval_ms=1000,
                immediate_check=False
            ):
                self.logger.error("‚ùå El segundo bot√≥n 'Archivar' no apareci√≥")
                return False
            
            if not await self.click_in_frame(
                self.SELECTOR_BTN_ARCHIVAR_SEGUNDO,
                "segundo bot√≥n 'Archivar'"
            ):
                self.logger.error("‚ùå Error al hacer clic en segundo bot√≥n 'Archivar'")
                return False
            
            # Paso 8: Manejar alert de confirmaci√≥n
            try:
                await self.page.wait_for_timeout(2000)  # Esperar que aparezca el alert
                # Aceptar el alert autom√°ticamente
                await self.page.on("dialog", lambda dialog: dialog.accept())
                self.logger.info("‚úÖ Alert de confirmaci√≥n aceptado")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è No se detect√≥ alert o ya fue manejado: {e}")
            
            # Paso 9: Esperar y hacer clic en "Estudio de Seguro"
            await self.page.wait_for_timeout(3000)
            
            if not await self.verify_element_value_in_frame(
                self.SELECTOR_ESTUDIO_SEGURO,
                "enlace 'Estudio de Seguro'",
                condition="is_visible",
                attempts=15,
                interval_ms=1000,
                immediate_check=False
            ):
                self.logger.error("‚ùå El enlace 'Estudio de Seguro' no apareci√≥")
                return False
            
            if not await self.click_in_frame(
                self.SELECTOR_ESTUDIO_SEGURO,
                "enlace 'Estudio de Seguro'"
            ):
                self.logger.error("‚ùå Error al hacer clic en 'Estudio de Seguro'")
                return False          
            
            # Paso 10: Descargar PDF directamente desde la URL
            self.logger.info("üåê Detectando nueva pesta√±a con el PDF...")
            nuevo_popup = await self.page.context.wait_for_event("page")
            await nuevo_popup.wait_for_load_state("networkidle")

            pdf_url = nuevo_popup.url
            self.logger.info(f"üîó URL del PDF: {pdf_url}")

            # Descargar v√≠a API de Playwright (m√°s fiable que interactuar con el visor)
            response = await self.page.context.request.get(pdf_url)
            if not response.ok:
                self.logger.error(f"‚ùå Fall√≥ la descarga del PDF (status {response.status})")
                return False

            # Generar nombre de archivo usando Utils
            nombre = Utils.generate_filename('allianz', 'Cotizacion')
            
            # Usar el directorio de descargas espec√≠fico de Allianz
            downloads_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))), 'downloads', 'allianz')
            Utils.ensure_directory(downloads_dir)
            
            ruta = os.path.join(downloads_dir, nombre)
            with open(ruta, "wb") as f:
                f.write(await response.body())
            self.logger.info(f"‚úÖ PDF de Allianz guardado en {ruta}")

            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en consulta y finalizaci√≥n de Allianz: {e}")
            return False
        
    async def execute_placa_flow(self, placa: str = None, fecha_nacimiento: str = None, genero: str = None, departamento: str = None, ciudad: str = None) -> bool:
        """Ejecuta el flujo completo desde placa hasta finalizaci√≥n en Allianz."""
        # Usar valores del config si no se proporcionan espec√≠ficos
        if placa is None:
            placa = self.config.PLACA_VEHICULO
        if fecha_nacimiento is None:
            fecha_nacimiento = self.config.FECHA_NACIMIENTO
        if genero is None:
            genero = self.config.GENERO_ASEGURADO
        if departamento is None:
            departamento = self.config.DEPARTAMENTO
        if ciudad is None:
            ciudad = self.config.CIUDAD
            
        self.logger.info(f"üöó Iniciando flujo completo de placa Allianz con '{placa}', ciudad '{ciudad}'...")
        steps = [
            self.esperar_y_llenar_placa,
            self.click_comprobar_placa,
            self.verificar_campo_lleno,
            self.llenar_datos_asegurado,
            self.buscador_poblaciones,
            self.consultar_y_finalizar
        ]
        try:
            for i, step in enumerate(steps, 1):
                self.logger.info(f"üìã Ejecutando paso {i}/{len(steps)}...")
                if not await step():
                    self.logger.error(f"‚ùå Fall√≥ el paso {i}")
                    return False
            self.logger.info("‚úÖ ¬°FLUJO COMPLETO DE PLACA ALLIANZ EXITOSO!")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Error en flujo completo de placa Allianz: {e}")
            return False
