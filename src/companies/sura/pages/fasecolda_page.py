"""P√°gina de manejo de c√≥digo Fasecolda espec√≠fica para Sura"""

import datetime
from typing import Optional
from playwright.async_api import Page
from ....shared.base_page import BasePage
from ....config.sura_config import SuraConfig
from ....shared.fasecolda_service import FasecoldaService

class FasecoldaPage(BasePage):
    """P√°gina de manejo de c√≥digo Fasecolda para Sura."""
    
    # Selector para el c√≥digo Fasecolda - se busca din√°micamente por etiqueta
    FASECOLDA_CODE_INPUT = "input[aria-labelledby*='paper-input-label']:not([placeholder*='DD/MM/YYYY'])"  # Fallback gen√©rico
    
    # Selectores para mensaje de error y bot√≥n Aceptar
    ERROR_MESSAGE_SELECTOR = "#divMessage:has-text('No existe el fasecolda')"
    ACCEPT_BUTTON_SELECTOR = "#btnOne:has-text('Aceptar')"
    
    # Selectores para dropdown de categor√≠a de veh√≠culo y a√±o del modelo
    VEHICLE_CATEGORY_DROPDOWN_ID = "#clase"  # ID del dropdown de categor√≠a/clase de veh√≠culo
    VEHICLE_CATEGORY_OPTION = "paper-item:has-text('AUTOM√ìVILES')"  # Opci√≥n para seleccionar AUTOM√ìVILES
    MODEL_YEAR_DROPDOWN_ID = "#modelo"  # ID del dropdown de a√±o del modelo
    MODEL_YEAR_OPTION_TEMPLATE = "paper-item:has-text('{year}')"  # Template para seleccionar a√±o del modelo
    
    # Selectores para campos adicionales despu√©s del Fasecolda
    SERVICE_TYPE_DROPDOWN_ID = "#tipoServicio"  # ID del dropdown de tipo de servicio
    SERVICE_TYPE_OPTION = "paper-item:has-text('Particular')"  # Opci√≥n para seleccionar Particular
    CITY_INPUT_SELECTOR = "input[aria-label='Ciudad']"  # Campo de ciudad
    CITY_OPTION_TEMPLATE = "vaadin-combo-box-item:has-text('Medellin - (Antioquia)')"  # Opci√≥n de ciudad
    PLATE_INPUT_SELECTOR = "#placa input"  # Campo de placa
    ZERO_KM_RADIO_SELECTOR = "paper-radio-button[title='opcion-Si']"  # Radio button para cero kil√≥metros

    def __init__(self, page: Page):
        super().__init__(page, 'sura')
        self.config = SuraConfig()

    async def get_fasecolda_code(self) -> Optional[dict]:
        """Obtiene los c√≥digos Fasecolda usando FasecoldaService en una nueva pesta√±a."""
        self.logger.info("üîç Obteniendo c√≥digos Fasecolda...")
        
        try:
            # Verificar si debe buscar autom√°ticamente
            if not self.config.AUTO_FETCH_FASECOLDA:
                self.logger.info("‚è≠Ô∏è B√∫squeda autom√°tica de Fasecolda deshabilitada")
                return None
            
            # Solo buscar si es veh√≠culo nuevo
            if self.config.VEHICLE_STATE != 'Nuevo':
                self.logger.info(f"‚è≠Ô∏è Veh√≠culo '{self.config.VEHICLE_STATE}' - no requiere c√≥digo Fasecolda")
                return None
            
            # Crear nueva pesta√±a para Fasecolda
            self.logger.info("üåê Abriendo nueva pesta√±a para Fasecolda...")
            new_page = await self.page.context.new_page()
            
            try:
                # Inicializar el servicio de Fasecolda
                fasecolda_service = FasecoldaService(new_page, self.logger)
                
                # Obtener los c√≥digos CF y CH
                codes = await fasecolda_service.get_cf_code(
                    category=self.config.VEHICLE_CATEGORY,
                    state=self.config.VEHICLE_STATE,
                    model_year=self.config.VEHICLE_MODEL_YEAR,
                    brand=self.config.VEHICLE_BRAND,
                    reference=self.config.VEHICLE_REFERENCE,
                    full_reference=self.config.VEHICLE_FULL_REFERENCE
                )
                
                if codes and codes.get('cf_code'):
                    ch_info = f" - CH: {codes.get('ch_code')}" if codes.get('ch_code') else ""
                    self.logger.info(f"‚úÖ C√≥digos Fasecolda obtenidos - CF: {codes['cf_code']}{ch_info}")
                    return codes
                else:
                    self.logger.warning("‚ö†Ô∏è No se pudieron obtener c√≥digos Fasecolda")
                    return None
                    
            finally:
                # Cerrar la pesta√±a de Fasecolda
                await new_page.close()
                self.logger.info("üóÇÔ∏è Pesta√±a de Fasecolda cerrada")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error obteniendo c√≥digos Fasecolda: {e}")
            return None

    async def fill_fasecolda_code(self, cf_code: str) -> bool:
        """Llena el campo del c√≥digo Fasecolda buscando din√°micamente por etiqueta."""
        self.logger.info(f"üìã Llenando c√≥digo Fasecolda: {cf_code}")
        
        try:
            # Buscar din√°micamente el campo de Fasecolda por su etiqueta
            fasecolda_selector = await self._find_fasecolda_input_selector()
            
            if not fasecolda_selector:
                self.logger.error("‚ùå No se pudo encontrar el campo de Fasecolda")
                return False
            
            self.logger.info(f"üìù Campo Fasecolda encontrado con selector: {fasecolda_selector}")
            
            # Usar fill_and_verify_field_flexible de la clase base
            if not await self.fill_and_verify_field_flexible(
                selector=fasecolda_selector,
                value=cf_code,
                field_name="C√≥digo Fasecolda",
                max_attempts=3
            ):
                self.logger.error("‚ùå No se pudo llenar el campo de c√≥digo Fasecolda")
                return False
            
            self.logger.info("‚úÖ C√≥digo Fasecolda llenado exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error llenando c√≥digo Fasecolda: {e}")
            return False

    async def check_and_handle_fasecolda_error(self) -> bool:
        """Verifica si apareci√≥ el mensaje de error 'No existe el fasecolda' y lo maneja."""
        self.logger.info("üîç Verificando si hay error de Fasecolda...")
        
        try:
            # Verificar si apareci√≥ el mensaje de error con timeout corto
            error_visible = await self.is_visible_safe(self.ERROR_MESSAGE_SELECTOR, timeout=3000)
            
            if error_visible:
                self.logger.warning("‚ö†Ô∏è Detectado mensaje 'No existe el fasecolda'")
                
                # Hacer clic en el bot√≥n Aceptar
                if await self.safe_click(self.ACCEPT_BUTTON_SELECTOR, timeout=5000):
                    self.logger.info("‚úÖ Bot√≥n 'Aceptar' presionado exitosamente")
                    
                    # Esperar un poco para que el modal se cierre
                    await self.page.wait_for_timeout(2000)
                    return True
                else:
                    self.logger.error("‚ùå No se pudo hacer clic en el bot√≥n 'Aceptar'")
                    return False
            else:
                self.logger.info("‚úÖ No se detect√≥ error de Fasecolda")
                return False
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error verificando mensaje de error Fasecolda: {e}")
            return False

    async def fill_fasecolda_with_retry(self, codes: dict) -> bool:
        """Llena el c√≥digo Fasecolda con reintentos usando CH primero y CF como fallback."""
        self.logger.info("üîÑ Iniciando proceso de llenado de Fasecolda con reintentos...")
        
        # Lista de c√≥digos a intentar: primero CH, luego CF
        codes_to_try = []
        
        if codes.get('ch_code'):
            codes_to_try.append(('CH', codes['ch_code']))
        
        if codes.get('cf_code'):
            codes_to_try.append(('CF', codes['cf_code']))
        
        if not codes_to_try:
            self.logger.error("‚ùå No hay c√≥digos disponibles para intentar")
            return False
        
        for attempt, (code_type, code_value) in enumerate(codes_to_try, 1):
            self.logger.info(f"üéØ Intento {attempt}: Probando c√≥digo {code_type}: {code_value}")
            
            # Llenar el c√≥digo Fasecolda
            if not await self.fill_fasecolda_code(code_value):
                self.logger.warning(f"‚ö†Ô∏è No se pudo llenar el c√≥digo {code_type}")
                continue
            
            # Seleccionar categor√≠a de veh√≠culo despu√©s de llenar Fasecolda
            if not await self.select_vehicle_category():
                self.logger.warning("‚ö†Ô∏è No se pudo seleccionar categor√≠a AUTOM√ìVILES")
                continue
            
            # Seleccionar a√±o del modelo despu√©s de seleccionar categor√≠a
            if not await self.select_model_year():
                self.logger.warning("‚ö†Ô∏è No se pudo seleccionar a√±o del modelo")
                continue
            
            # Verificar si apareci√≥ error de Fasecolda
            error_occurred = await self.check_and_handle_fasecolda_error()
            
            if not error_occurred:
                self.logger.info(f"‚úÖ C√≥digo {code_type} aceptado exitosamente")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è C√≥digo {code_type} rechazado, continuando con siguiente...")
                # Limpiar el campo antes del siguiente intento si es necesario
                await self._clear_fasecolda_field()
        
        self.logger.error("‚ùå Todos los c√≥digos fueron rechazados")
        return False

    async def _clear_fasecolda_field(self) -> bool:
        """Limpia el campo de Fasecolda para el siguiente intento."""
        try:
            fasecolda_selector = await self._find_fasecolda_input_selector()
            if fasecolda_selector:
                await self.page.fill(fasecolda_selector, "")
                await self.page.wait_for_timeout(500)
                return True
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error limpiando campo Fasecolda: {e}")
        return False

    async def _find_fasecolda_input_selector(self) -> str:
        """Encuentra din√°micamente el selector del campo de Fasecolda por su etiqueta."""
        try:
            # Ejecutar JavaScript para buscar el campo de Fasecolda din√°micamente
            fasecolda_selector = await self.page.evaluate("""
                () => {
                    // Buscar todos los inputs
                    const inputs = Array.from(document.querySelectorAll('input'));
                    
                    // Filtrar por aquellos que tengan una etiqueta con texto "Fasecolda"
                    const fasecoldaInputs = inputs.filter(input => {
                        const labelId = input.getAttribute('aria-labelledby');
                        if (labelId) {
                            const labelElement = document.getElementById(labelId);
                            if (labelElement && labelElement.textContent.toLowerCase().includes('fasecolda')) {
                                return true;
                            }
                        }
                        return false;
                    });
                    
                    if (fasecoldaInputs.length > 0) {
                        const input = fasecoldaInputs[0];
                        const labelId = input.getAttribute('aria-labelledby');
                        return `input[aria-labelledby='${labelId}']`;
                    }
                    
                    return null;
                }
            """)
            
            return fasecolda_selector
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error buscando selector de Fasecolda din√°micamente: {e}")
            return None

    async def select_vehicle_category(self) -> bool:
        """Selecciona 'AUTOM√ìVILES' del dropdown de categor√≠a de veh√≠culo."""
        self.logger.info("üöó Seleccionando categor√≠a de veh√≠culo: AUTOM√ìVILES...")
        
        try:
            # Hacer clic en el dropdown de categor√≠a para abrirlo
            if not await self.safe_click(self.VEHICLE_CATEGORY_DROPDOWN_ID, timeout=10000):
                self.logger.error("‚ùå No se pudo hacer clic en el dropdown de categor√≠a de veh√≠culo")
                return False
            
            # Esperar a que aparezcan las opciones
            await self.page.wait_for_timeout(1000)
            
            # Hacer clic en AUTOM√ìVILES
            if not await self.safe_click(self.VEHICLE_CATEGORY_OPTION, timeout=5000):
                self.logger.error("‚ùå No se pudo seleccionar AUTOM√ìVILES")
                return False
            
            self.logger.info("‚úÖ Categor√≠a 'AUTOM√ìVILES' seleccionada exitosamente")
            
            # Esperar un poco para que se procese la selecci√≥n
            await self.page.wait_for_timeout(1500)
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error seleccionando categor√≠a de veh√≠culo: {e}")
            return False

    async def select_model_year(self) -> bool:
        """Selecciona el a√±o del modelo configurado del dropdown."""
        self.logger.info(f"üìÖ Seleccionando a√±o del modelo: {self.config.VEHICLE_MODEL_YEAR}...")
        
        try:
            # Hacer clic en el dropdown de modelo/a√±o para abrirlo
            if not await self.safe_click(self.MODEL_YEAR_DROPDOWN_ID, timeout=10000):
                self.logger.error("‚ùå No se pudo hacer clic en el dropdown de modelo/a√±o")
                return False
            
            # Esperar a que aparezcan las opciones
            await self.page.wait_for_timeout(1000)
            
            # Crear el selector espec√≠fico para el a√±o
            year_selector = self.MODEL_YEAR_OPTION_TEMPLATE.format(year=self.config.VEHICLE_MODEL_YEAR)
            
            # Hacer clic en el a√±o configurado
            if not await self.safe_click(year_selector, timeout=5000):
                self.logger.error(f"‚ùå No se pudo seleccionar el a√±o: {self.config.VEHICLE_MODEL_YEAR}")
                return False
            
            self.logger.info(f"‚úÖ A√±o '{self.config.VEHICLE_MODEL_YEAR}' seleccionado exitosamente")
            
            # Esperar un poco para que se procese la selecci√≥n
            await self.page.wait_for_timeout(1500)
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error seleccionando a√±o del modelo: {e}")
            return False

    async def select_service_type(self) -> bool:
        """Selecciona 'Particular' del dropdown de tipo de servicio."""
        self.logger.info("üè† Seleccionando tipo de servicio: Particular...")
        
        try:
            # Hacer clic en el dropdown de tipo de servicio para abrirlo
            if not await self.safe_click(self.SERVICE_TYPE_DROPDOWN_ID, timeout=10000):
                self.logger.error("‚ùå No se pudo hacer clic en el dropdown de tipo de servicio")
                return False
            
            # Esperar a que aparezcan las opciones
            await self.page.wait_for_timeout(1000)
            
            # Hacer clic en Particular
            if not await self.safe_click(self.SERVICE_TYPE_OPTION, timeout=5000):
                self.logger.error("‚ùå No se pudo seleccionar Particular")
                return False
            
            self.logger.info("‚úÖ Tipo de servicio 'Particular' seleccionado exitosamente")
            
            # Esperar un poco para que se procese la selecci√≥n
            await self.page.wait_for_timeout(1500)
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error seleccionando tipo de servicio: {e}")
            return False

    async def fill_city(self) -> bool:
        """Llena el campo de ciudad y selecciona la opci√≥n de Medell√≠n."""
        self.logger.info(f"üèôÔ∏è Llenando ciudad: {self.config.CLIENT_CITY}...")
        
        try:
            # Llenar el campo de ciudad directamente con fill()
            await self.page.fill(self.CITY_INPUT_SELECTOR, self.config.CLIENT_CITY)
            
            # Esperar a que aparezcan las opciones del autocompletado
            await self.page.wait_for_timeout(1500)
            
            # Seleccionar la opci√≥n de Medell√≠n - Antioquia
            if not await self.safe_click(self.CITY_OPTION_TEMPLATE, timeout=5000):
                self.logger.error("‚ùå No se pudo seleccionar la opci√≥n de ciudad")
                return False
            
            self.logger.info("‚úÖ Ciudad seleccionada exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error llenando ciudad: {e}")
            return False

    async def fill_plate(self) -> bool:
        """Llena el campo de placa con una placa gen√©rica."""
        self.logger.info("üöó Llenando placa gen√©rica: XXX123...")
        
        try:
            # Llenar el campo de placa con una placa gen√©rica
            if not await self.fill_and_verify_field_flexible(
                selector=self.PLATE_INPUT_SELECTOR,
                value="XXX123",
                field_name="Placa",
                max_attempts=3
            ):
                self.logger.error("‚ùå No se pudo llenar el campo de placa")
                return False
            
            self.logger.info("‚úÖ Placa llenada exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error llenando placa: {e}")
            return False

    async def select_zero_kilometers(self) -> bool:
        """Selecciona 'S√≠' en la opci√≥n de cero kil√≥metros."""
        self.logger.info("üÜï Seleccionando veh√≠culo cero kil√≥metros: S√≠...")
        
        try:
            # Hacer clic en el radio button de S√≠ para cero kil√≥metros
            if not await self.safe_click(self.ZERO_KM_RADIO_SELECTOR, timeout=10000):
                self.logger.error("‚ùå No se pudo seleccionar la opci√≥n de cero kil√≥metros")
                return False
            
            self.logger.info("‚úÖ Opci√≥n 'S√≠' para cero kil√≥metros seleccionada exitosamente")
            
            # Esperar un poco para que se procese la selecci√≥n
            await self.page.wait_for_timeout(1500)
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error seleccionando cero kil√≥metros: {e}")
            return False

    async def trigger_quote_calculation(self) -> bool:
        """Hace clic en un √°rea vac√≠a para deseleccionar y activar el c√°lculo de la cotizaci√≥n."""
        self.logger.info("üéØ Activando c√°lculo de cotizaci√≥n...")
        
        try:
            # Hacer clic en el body para deseleccionar cualquier elemento activo
            await self.page.click("body")
            
            # Esperar a que se procese y se calcule la cotizaci√≥n
            await self.page.wait_for_timeout(3000)
            
            self.logger.info("‚úÖ C√°lculo de cotizaci√≥n activado")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error activando c√°lculo de cotizaci√≥n: {e}")
            return False

    async def check_quote_result(self) -> bool:
        """Verifica si aparece el resultado de la prima anual."""
        self.logger.info("üí∞ Verificando resultado de la cotizaci√≥n...")
        
        try:
            # Buscar el elemento de prima anual y verificar si tiene valor
            result = await self.page.evaluate("""
                () => {
                    const primaAnualElement = document.getElementById('primaAnual');
                    return primaAnualElement ? {
                        text: primaAnualElement.textContent?.trim(),
                        visible: primaAnualElement.offsetParent !== null,
                        hasValue: primaAnualElement.textContent?.trim() !== ''
                    } : null;
                }
            """)
            
            if result and result.get('hasValue'):
                self.logger.info(f"‚úÖ Prima anual calculada: {result['text']}")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è Prima anual a√∫n no calculada o sin valor")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Error verificando resultado de cotizaci√≥n: {e}")
            return False

    async def complete_vehicle_information_filling(self) -> bool:
        """Proceso completo para llenar la informaci√≥n adicional del veh√≠culo despu√©s del Fasecolda."""
        self.logger.info("üìã Completando informaci√≥n del veh√≠culo...")
        
        try:
            # 1. Seleccionar tipo de servicio: Particular
            if not await self.select_service_type():
                self.logger.warning("‚ö†Ô∏è No se pudo seleccionar tipo de servicio")
                return False
            
            # 2. Llenar ciudad
            if not await self.fill_city():
                self.logger.warning("‚ö†Ô∏è No se pudo llenar la ciudad")
                return False
            
            # 3. Llenar placa
            if not await self.fill_plate():
                self.logger.warning("‚ö†Ô∏è No se pudo llenar la placa")
                return False
            
            # 4. Seleccionar cero kil√≥metros
            if not await self.select_zero_kilometers():
                self.logger.warning("‚ö†Ô∏è No se pudo seleccionar cero kil√≥metros")
                return False
            
            # 5. Activar c√°lculo de cotizaci√≥n
            if not await self.trigger_quote_calculation():
                self.logger.warning("‚ö†Ô∏è No se pudo activar el c√°lculo de cotizaci√≥n")
                return False
            
            # 6. Verificar resultado (opcional, no bloquea el proceso)
            await self.check_quote_result()
            
            self.logger.info("üéâ Informaci√≥n del veh√≠culo completada exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error completando informaci√≥n del veh√≠culo: {e}")
            return False

    async def process_fasecolda_filling(self) -> bool:
        """Proceso completo de obtenci√≥n y llenado de c√≥digos Fasecolda y informaci√≥n del veh√≠culo."""
        self.logger.info("üîç Procesando llenado de c√≥digo Fasecolda y informaci√≥n del veh√≠culo...")
        
        try:
            # Obtener c√≥digos Fasecolda (solo para veh√≠culos nuevos)
            codes = await self.get_fasecolda_code()
            if codes:
                if not await self.fill_fasecolda_with_retry(codes):
                    self.logger.warning("‚ö†Ô∏è No se pudieron llenar los c√≥digos Fasecolda")
                    return False
            else:
                self.logger.info("‚è≠Ô∏è No se obtuvieron c√≥digos Fasecolda (veh√≠culo usado o b√∫squeda deshabilitada)")
                # Para veh√≠culos usados, a√∫n necesitamos llenar la informaci√≥n adicional
            
            # Completar el llenado de informaci√≥n adicional del veh√≠culo
            if not await self.complete_vehicle_information_filling():
                self.logger.warning("‚ö†Ô∏è No se pudo completar la informaci√≥n adicional del veh√≠culo")
                return False
            
            self.logger.info("üéâ Proceso de llenado de c√≥digo Fasecolda e informaci√≥n del veh√≠culo completado exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error procesando llenado de Fasecolda: {e}")
            return False
