"""P√°gina de consulta de p√≥liza espec√≠fica para Sura - Versi√≥n refactorizada"""

import datetime
from typing import Optional
from playwright.async_api import Page
from ....shared.base_page import BasePage
from ....config.sura_config import SuraConfig
from ....config.client_config import ClientConfig
from ....shared.utils import Utils

class PolicyPage(BasePage):
    """P√°gina de consulta de p√≥liza para Sura."""
    
    # Selectores basados en el HTML real - usar aria-labelledby espec√≠fico
    POLIZA_INPUT = "input[aria-labelledby='paper-input-label-23']"  # Basado en el HTML que mostraste
    FECHA_INPUT = "input[placeholder='DD/MM/YYYY']"
    CONSULTAR_BUTTON = "paper-button#botonConsultarPoliza"
    
    # Elementos que indican que la p√°gina est√° cargada
    PAGE_READY_SELECTORS = [
        "input[aria-labelledby='paper-input-label-23']",
        "input[placeholder='DD/MM/YYYY']",
        "paper-button#botonConsultarPoliza"
    ]
    
    # Nuevos selectores para la p√°gina de selecci√≥n de planes
    PLAN_SELECTION_INDICATOR = "span.self-center:has-text('Seleccione el plan')"
    PLAN_SELECTOR_TEMPLATE = "div.nombre-plan:has-text('{plan_name}')"  # Selector correcto basado en HTML real
    VIGENCIA_FECHA_INPUT = "input[aria-labelledby='paper-input-label-27']"  # Selector espec√≠fico para fecha de vigencia

    def __init__(self, page: Page):
        super().__init__(page, 'sura')
        self.config = SuraConfig()

    async def wait_for_page_ready(self) -> bool:
        """Espera a que la p√°gina de consulta de p√≥liza est√© lista usando funciones base."""
        self.logger.info("‚è≥ Esperando p√°gina de consulta de p√≥liza lista...")

        async def _check_page_ready() -> bool:
            """Funci√≥n interna para verificar si la p√°gina est√° lista."""
            try:
                # Verificar URL esperada
                current_url = self.page.url
                if "datosBasicos" not in current_url:
                    return False
                
                # Usar wait_for_selector_safe de la clase base para el elemento principal
                if not await self.wait_for_selector_safe(self.POLIZA_INPUT, timeout=3000):
                    return False
                
                # Verificar que al menos 2 de 3 elementos est√©n presentes
                elements_found = 0
                for selector in self.PAGE_READY_SELECTORS:
                    if await self.is_visible_safe(selector, timeout=1000):
                        elements_found += 1
                
                if elements_found >= 2:
                    self.logger.info(f"‚úÖ P√°gina lista con {elements_found}/3 elementos - URL: {current_url}")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è Solo {elements_found}/3 elementos encontrados")
                    return False
                    
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Error verificando p√°gina: {e}")
                return False

        # Usar retry_action de la clase base para los reintentos autom√°ticos
        return await self.retry_action(
            action_func=_check_page_ready,
            description="verificar p√°gina de p√≥liza lista",
            max_attempts=20,
            delay_seconds=2.0
        )

    async def fill_policy_data(self) -> bool:
        """Llena los datos de p√≥liza y fecha con verificaci√≥n individual usando funciones base."""
        self.logger.info("üìã Llenando datos de p√≥liza...")
        
        try:
            # Generar fecha actual y limpiarla
            today = datetime.datetime.now()
            fecha_formateada = today.strftime("%d/%m/%Y")
            fecha_limpia = Utils.clean_date(fecha_formateada)
            
            self.logger.info(f"üìÑ P√≥liza: {ClientConfig.get_policy_number('sura')}")
            self.logger.info(f"üìÖ Fecha: {fecha_formateada} -> {fecha_limpia}")
            
            # Llenar ambos campos usando la funci√≥n base
            field_map = {
                self.POLIZA_INPUT: ClientConfig.get_policy_number('sura'),
                self.FECHA_INPUT: fecha_limpia
            }
            
            # Usar fill_multiple_fields de la clase base
            if not await self.fill_multiple_fields(
                field_map=field_map,
                description="datos de p√≥liza",
                timeout=5000,
                delay_between_fields=0.5
            ):
                self.logger.error("‚ùå No se pudieron llenar los campos de p√≥liza")
                return False
            
            # Verificar que los valores se establecieron correctamente
            if not await self._verify_policy_fields(fecha_limpia):
                self.logger.warning("‚ö†Ô∏è Verificaci√≥n de campos fall√≥, pero continuando...")
            
            self.logger.info("‚úÖ Campos de p√≥liza llenados correctamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error llenando datos de p√≥liza: {e}")
            return False

    async def _verify_policy_fields(self, expected_date: str) -> bool:
        """Verifica que los campos de p√≥liza se llenaron correctamente."""
        try:
            # Verificar campo de p√≥liza
            poliza_value = await self.page.input_value(self.POLIZA_INPUT)
            if poliza_value != ClientConfig.get_policy_number('sura'):
                self.logger.warning(f"‚ö†Ô∏è P√≥liza - Esperado: '{ClientConfig.get_policy_number('sura')}', Actual: '{poliza_value}'")
                return False
            
            # Verificar campo de fecha (con validaci√≥n flexible)
            fecha_value = await self.page.input_value(self.FECHA_INPUT)
            if not self._validate_date_field(expected_date, fecha_value):
                self.logger.warning(f"‚ö†Ô∏è Fecha - Esperado: '{expected_date}', Actual: '{fecha_value}'")
                return False
            
            self.logger.info("‚úÖ Verificaci√≥n de campos exitosa")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error verificando campos: {e}")
            return False

    def _validate_date_field(self, expected: str, actual: str) -> bool:
        """Valida campos de fecha con m√∫ltiples formatos aceptados."""
        # Usar la funci√≥n de validaci√≥n de la clase base
        try:
            # Normalizar valores
            expected_clean = expected.strip()
            actual_clean = actual.strip()
            
            # Verificaci√≥n directa
            if actual_clean == expected_clean:
                return True
            
            # Si el expected es formato DDMMYYYY (8 d√≠gitos)
            if len(expected_clean) == 8 and expected_clean.isdigit():
                expected_formatted = f"{expected_clean[:2]}/{expected_clean[2:4]}/{expected_clean[4:]}"
                if actual_clean == expected_formatted:
                    return True
            
            # Verificaci√≥n flexible: comparar solo n√∫meros
            actual_numbers = ''.join(filter(str.isdigit, actual_clean))
            expected_numbers = ''.join(filter(str.isdigit, expected_clean))
            
            return actual_numbers == expected_numbers
            
        except Exception:
            return False

    async def click_consultar(self) -> bool:
        """Hace clic en el bot√≥n Consultar usando funciones base."""
        self.logger.info("üîç Haciendo clic en Consultar...")
        
        try:
            current_url = self.page.url
            self.logger.info(f"üìç URL actual: {current_url}")
            
            # Usar safe_click de la clase base
            if not await self.safe_click(self.CONSULTAR_BUTTON, timeout=5000):
                return False
            
            self.logger.info("‚úÖ Clic en Consultar exitoso")
            
            # Esperar un poco para que procese la consulta
            await self.page.wait_for_timeout(3000)
            
            # Verificar si hay alg√∫n cambio en la p√°gina o navegaci√≥n
            new_url = self.page.url
            if new_url != current_url:
                self.logger.info(f"üîÑ Navegaci√≥n detectada - Nueva URL: {new_url}")
            else:
                self.logger.info("üìÑ P√°gina procesada sin cambio de URL")
            
            return True
                
        except Exception as e:
            self.logger.error(f"‚ùå Error haciendo clic en Consultar: {e}")
            return False

    async def wait_for_plan_selection(self) -> bool:
        """Espera a que aparezca la pantalla de selecci√≥n de planes usando funciones base."""
        self.logger.info("‚è≥ Esperando pantalla de selecci√≥n de planes...")
        
        # Usar wait_for_selector_safe de la clase base
        return await self.wait_for_selector_safe(
            self.PLAN_SELECTION_INDICATOR, 
            timeout=15000
        )

    async def select_plan(self, plan_name: str) -> bool:
        """Selecciona un plan espec√≠fico usando funciones base."""
        self.logger.info(f"üéØ Seleccionando plan: {plan_name}")
        
        try:
            # Crear el selector espec√≠fico para el plan
            plan_selector = self.PLAN_SELECTOR_TEMPLATE.format(plan_name=plan_name)
            
            # Esperar a que el plan est√© disponible y hacer clic usando funciones base
            if not await self.wait_for_selector_safe(plan_selector, timeout=10000):
                self.logger.error(f"‚ùå Plan '{plan_name}' no disponible")
                return False
            
            # Hacer clic en el plan usando safe_click
            if not await self.safe_click(plan_selector, timeout=5000):
                self.logger.error(f"‚ùå No se pudo hacer clic en el plan: {plan_name}")
                return False
            
            self.logger.info(f"‚úÖ Plan '{plan_name}' seleccionado exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error seleccionando plan '{plan_name}': {e}")
            return False

    async def fill_vigencia_date(self) -> bool:
        """Llena la fecha de inicio de vigencia con la fecha de hoy usando funciones base."""
        self.logger.info("üìÖ Llenando fecha de inicio de vigencia...")
        
        try:
            # Obtener fecha de hoy en formato DDMMYYYY
            today = datetime.datetime.now()
            fecha_hoy = today.strftime("%d%m%Y")  # Formato: 23062025
            
            self.logger.info(f"üìÖ Fecha de hoy: {fecha_hoy}")
            
            # Usar fill_and_verify_field_flexible de la clase base
            if not await self.fill_and_verify_field_flexible(
                selector=self.VIGENCIA_FECHA_INPUT,
                value=fecha_hoy,
                field_name="Fecha de Vigencia",
                max_attempts=3
            ):
                self.logger.error("‚ùå No se pudo llenar el campo de fecha de vigencia")
                return False
            
            self.logger.info("‚úÖ Fecha de vigencia llenada exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error llenando fecha de vigencia: {e}")
            return False

    async def process_plan_selection(self) -> bool:
        """Procesa la selecci√≥n del plan y llenado de fecha de vigencia √∫nicamente."""
        self.logger.info("üéØ Procesando selecci√≥n de plan...")
        
        try:
            # 1. Esperar a que aparezca la pantalla de selecci√≥n de planes
            if not await self.wait_for_plan_selection():
                self.logger.error("‚ùå No se pudo cargar la pantalla de selecci√≥n de planes")
                return False
            
            # 2. Seleccionar el plan configurado (por defecto "Plan Autos Global")
            selected_plan = ClientConfig.get_company_specific_config('sura').get('selected_plan', 'Plan Autos Global')
            if not await self.select_plan(selected_plan):
                self.logger.error(f"‚ùå No se pudo seleccionar el plan: {selected_plan}")
                return False
            
            # 3. Llenar la fecha de inicio de vigencia
            if not await self.fill_vigencia_date():
                self.logger.error("‚ùå No se pudo llenar la fecha de vigencia")
                return False
            
            self.logger.info("üéâ Selecci√≥n de plan y fecha de vigencia completada exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error procesando selecci√≥n de plan: {e}")
            return False

    async def process_policy_page(self) -> bool:
        """Proceso de consulta de p√≥liza hasta fecha de vigencia."""
        self.logger.info("üöÄ Procesando p√°gina de consulta de p√≥liza...")
        
        try:
            # 1. Verificar que la p√°gina est√© lista
            if not await self.wait_for_page_ready():
                self.logger.error("‚ùå La p√°gina de consulta de p√≥liza no est√° lista")
                return False

            self.logger.info("‚úÖ P√°gina de consulta de p√≥liza lista y detectada correctamente")
            
            # 2. Llenar datos de p√≥liza
            if not await self.fill_policy_data():
                self.logger.error("‚ùå No se pudieron llenar los datos de p√≥liza")
                return False
            
            # 3. Hacer clic en Consultar
            if not await self.click_consultar():
                self.logger.error("‚ùå No se pudo hacer clic en Consultar")
                return False
            
            # 4. Procesar selecci√≥n de plan y fecha de vigencia
            if not await self.process_plan_selection():
                self.logger.error("‚ùå No se pudo procesar la selecci√≥n de plan")
                return False
            
            self.logger.info("üéâ Proceso de p√≥liza completado hasta fecha de vigencia")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Error procesando p√°gina de consulta de p√≥liza: {e}")
            return False
