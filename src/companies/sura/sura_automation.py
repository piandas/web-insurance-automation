"""Automatizaci√≥n espec√≠fica para Sura."""

import asyncio
from typing import Optional

from ...core.base_automation import BaseAutomation
from ...config.sura_config import SuraConfig
from ...shared.global_pause_coordinator import wait_for_global_resume
from .pages import LoginPage, DashboardPage, QuotePage, PolicyPage, FasecoldaPage

class SuraAutomation(BaseAutomation):
    """Automatizaci√≥n espec√≠fica para Sura."""
    
    def __init__(
        self, 
        usuario: Optional[str] = None, 
        contrasena: Optional[str] = None, 
        headless: Optional[bool] = None
    ):
        super().__init__('sura', usuario, contrasena, headless)
        
        # Configuraci√≥n espec√≠fica de Sura
        self.config = SuraConfig()
        self.usuario = usuario or self.config.USUARIO
        self.contrasena = contrasena or self.config.CONTRASENA
        self.headless = headless if headless is not None else self.config.HEADLESS
        
        # P√°ginas espec√≠ficas de Sura
        self.login_page = None
        self.dashboard_page = None
        self.quote_page = None
        self.policy_page = None

    async def launch(self) -> bool:
        """Inicializa Playwright y abre el navegador."""
        if not await super().launch():
            return False
        
        # Inicializar p√°ginas espec√≠ficas de Sura
        self.login_page = LoginPage(self.page)
        self.dashboard_page = DashboardPage(self.page)
        
        self.logger.info("‚úÖ P√°ginas de Sura inicializadas")
        return True

    async def execute_login_flow(self) -> bool:
        """Ejecuta el flujo de login espec√≠fico de Sura con reintentos."""
        self.logger.info("üîê Ejecutando flujo de login Sura...")
        
        if not self.usuario or not self.contrasena:
            self.logger.error("‚ùå Credenciales de Sura no configuradas")
            return False
        
        max_intentos = 3
        for intento in range(1, max_intentos + 1):
            try:
                self.logger.info(f"üîÑ Intento de login {intento}/{max_intentos}")
                
                # Intentar login
                result = await self.login_page.login(self.usuario, self.contrasena)
                if result:
                    self.logger.info("‚úÖ Login exitoso")
                    return True
                    
                # Si fall√≥, esperar antes del siguiente intento
                if intento < max_intentos:
                    self.logger.warning(f"‚ö†Ô∏è Intento {intento} fall√≥, esperando antes del siguiente...")
                    await asyncio.sleep(3)
                    
                    # Intentar navegar de nuevo a la p√°gina de login
                    try:
                        await self.login_page.navigate_to_login()
                    except Exception as nav_error:
                        self.logger.warning(f"‚ö†Ô∏è Error re-navegando al login: {nav_error}")
                        
            except Exception as e:
                self.logger.error(f"‚ùå Error en intento de login {intento}: {e}")
                if intento < max_intentos:
                    await asyncio.sleep(3)
        
        self.logger.error(f"‚ùå Login fall√≥ despu√©s de {max_intentos} intentos")
        return False

    async def execute_navigation_flow(self) -> bool:
        """Ejecuta el flujo de navegaci√≥n espec√≠fico de Sura con reintentos."""
        self.logger.info("üß≠ Ejecutando flujo de navegaci√≥n Sura...")
        
        max_intentos = 3
        for intento in range(1, max_intentos + 1):
            try:
                self.logger.info(f"üîÑ Intento de navegaci√≥n {intento}/{max_intentos}")
                
                # Usar los valores desde la configuraci√≥n
                document_number = getattr(self.config, 'CLIENT_DOCUMENT_NUMBER', '1020422674')
                document_type = getattr(self.config, 'CLIENT_DOCUMENT_TYPE', 'C')
                
                # Ejecutar flujo completo de navegaci√≥n
                success, new_page = await self.dashboard_page.complete_navigation_flow(document_number, document_type)
                
                if success and new_page:
                    # Actualizar la referencia de la p√°gina en la automatizaci√≥n
                    self.page = new_page
                    self.logger.info(f"‚úÖ P√°gina actualizada en SuraAutomation: {new_page.url}")
                    self.logger.info("‚úÖ Flujo de navegaci√≥n Sura completado exitosamente")
                    return True            
                else:
                    self.logger.warning(f"‚ö†Ô∏è Intento {intento} de navegaci√≥n fall√≥")
                    if intento < max_intentos:
                        await asyncio.sleep(5)  # Esperar antes del siguiente intento
                        
            except Exception as e:
                self.logger.error(f"‚ùå Error en intento de navegaci√≥n {intento}: {e}")
                if intento < max_intentos:
                    await asyncio.sleep(5)
        
        self.logger.error(f"‚ùå Navegaci√≥n fall√≥ despu√©s de {max_intentos} intentos")
        return False

    async def execute_quote_flow(self) -> bool:
        """Ejecuta el flujo de cotizaci√≥n espec√≠fico de Sura."""
        self.logger.info("üí∞ Ejecutando flujo de cotizaci√≥n Sura...")
        
        try:
            self.logger.info("üìä Procesando p√°gina de cotizaci√≥n...")
            quote_page = QuotePage(self.page)
            
            if not await quote_page.process_quote_page():
                self.logger.error("‚ùå Error procesando p√°gina de cotizaci√≥n")
                return False
            
            self.logger.info("‚úÖ Flujo de cotizaci√≥n Sura completado exitosamente")
            return True
            
        except Exception as e:
            self.logger.exception(f"‚ùå Error ejecutando cotizaci√≥n Sura: {e}")
            return False

    async def execute_policy_flow(self) -> bool:
        """Ejecuta el flujo de consulta de p√≥liza espec√≠fico de Sura."""
        self.logger.info("üìÑ Ejecutando flujo completo de Sura...")
        
        try:
            # 1. Procesar p√°gina de p√≥liza hasta fecha de vigencia
            self.logger.info("üîç Procesando p√°gina de consulta de p√≥liza...")
            policy_page = PolicyPage(self.page)
            
            if not await policy_page.process_policy_page():
                self.logger.error("‚ùå Error procesando p√°gina de consulta de p√≥liza")
                return False
            
            # 2. Procesar c√≥digo Fasecolda y extraer primas
            self.logger.info("üîç Procesando c√≥digo Fasecolda, extrayendo primas y descargando PDF...")
            fasecolda_page = FasecoldaPage(self.page)
            
            results = await fasecolda_page.process_fasecolda_filling()
            
            if results['success']:
                self.logger.info(f"‚úÖ Primas extra√≠das - Global: ${results['prima_global']:,.0f}, Cl√°sico: ${results['prima_clasico']:,.0f}")
                
                if results.get('pdf_downloaded', False):
                    self.logger.info("üì• PDF descargado exitosamente")
                else:
                    self.logger.warning("‚ö†Ô∏è Primas extra√≠das pero PDF no se pudo descargar")
            else:
                self.logger.warning("‚ö†Ô∏è No se pudo procesar completamente el c√≥digo Fasecolda y extracci√≥n de primas")
                # No retornamos False porque el proceso puede continuar
            
            self.logger.info("‚úÖ Flujo completo de Sura completado exitosamente")
            return True
            
        except Exception as e:
            self.logger.exception(f"‚ùå Error ejecutando flujo completo de Sura: {e}")
            return False

    async def run_complete_flow(self) -> bool:
        """Ejecuta el flujo completo de automatizaci√≥n de Sura con soporte de pausas globales."""
        self.logger.info("üöÄ Iniciando flujo completo de Sura...")
        
        try:
            # Verificar pausa global antes de iniciar
            await wait_for_global_resume('sura')
            
            # 1. Ejecutar login
            self.logger.info("üîê Iniciando flujo de login...")
            await wait_for_global_resume('sura')
            if not await self.execute_login_flow():
                self.logger.error("‚ùå Error en el flujo de login")
                return False
            
            # 2. Ejecutar navegaci√≥n
            self.logger.info("üß≠ Iniciando flujo de navegaci√≥n...")
            await wait_for_global_resume('sura')
            if not await self.execute_navigation_flow():
                self.logger.error("‚ùå Error en el flujo de navegaci√≥n")
                return False
            
            # 3. Ejecutar cotizaci√≥n
            self.logger.info("üí∞ Iniciando flujo de cotizaci√≥n...")
            await wait_for_global_resume('sura')
            if not await self.execute_quote_flow():
                self.logger.error("‚ùå Error en el flujo de cotizaci√≥n")
                return False
            
            # 4. Ejecutar consulta de p√≥liza
            self.logger.info("üìã Iniciando flujo de consulta de p√≥liza...")
            await wait_for_global_resume('sura')
            if not await self.execute_policy_flow():
                self.logger.error("‚ùå Error en el flujo de consulta de p√≥liza")
                return False
            
            self.logger.info("üéâ ¬°Flujo completo de Sura completado exitosamente!")
            return True
            
        except Exception as e:
            self.logger.exception(f"‚ùå Error en el flujo completo de Sura: {e}")
            return False


# Funci√≥n principal para compatibilidad
async def main():
    """Funci√≥n principal para ejecutar la automatizaci√≥n de Sura."""
    automation = SuraAutomation()
    
    try:
        await automation.launch()
        success = await automation.run_complete_flow()
        
        if success:
            automation.logger.info("‚úÖ ¬°AUTOMATIZACI√ìN DE SURA COMPLETADA!")
            await asyncio.sleep(15)  # Tiempo para revisar resultados
        else:
            automation.logger.error("‚ùå La automatizaci√≥n de Sura fall√≥")
            await asyncio.sleep(15)
            
    except Exception as e:
        automation.logger.exception(f"‚ùå Error general en Sura: {e}")
    finally:
        await automation.close()

if __name__ == "__main__":
    asyncio.run(main())
