"""
Consolidador de cotizaciones de seguros.

Este m√≥dulo se encarga de crear un archivo Excel consolidado con los resultados
de las cotizaciones de Sura y Allianz una vez que ambas automatizaciones han finalizado.
"""

import os
import re
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
from pathlib import Path
import pandas as pd

from ..config.client_config import ClientConfig
from ..config.formulas_config import FormulasConfig
from ..core.logger_factory import LoggerFactory
from .template_handler import TemplateHandler


class CotizacionConsolidator:
    def extract_allianz_plans_from_logs(self) -> Dict[str, str]:
        """Extrae los valores de los planes de Allianz desde los logs de la automatizaci√≥n."""
        self.logger.info("üìä Extrayendo valores de planes de Allianz desde logs...")
        plans = {
            'Autos Esencial': 'No encontrado',
            'Autos Plus': 'No encontrado',
            'Autos Llave en Mano': 'No encontrado',
            'Autos Esencial + Totales': 'No encontrado'
        }
        try:
            allianz_log_path = self.base_path / "LOGS" / "allianz" / "allianz.log"
            if not allianz_log_path.exists():
                self.logger.warning("No se encontr√≥ el archivo de log de Allianz")
                return plans
            with open(allianz_log_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            # Leer solo las √∫ltimas 120 l√≠neas en lugar de 500
            recent_lines = lines[-120:] if len(lines) > 120 else lines
            
            self.logger.info(f"üîç Analizando las √∫ltimas {len(recent_lines)} l√≠neas del log de Allianz...")
            
            patterns = {
                'Autos Esencial': r'\[EXTRACCI√ìN\] Autos Esencial: ([0-9.,]+)',
                'Autos Plus': r'\[EXTRACCI√ìN\] Autos Plus: ([0-9.,]+)',
                'Autos Llave en Mano': r'\[EXTRACCI√ìN\] Autos Llave en Mano: ([0-9.,]+)',
                'Autos Esencial + Totales': r'\[EXTRACCI√ìN\] Autos Esencial \+ Totales: ([0-9.,]+)'
            }
            
            # Buscar cada plan en el log (desde las l√≠neas m√°s recientes hacia atr√°s)
            for plan_name, pattern in patterns.items():
                for line in reversed(recent_lines):
                    match = re.search(pattern, line)
                    if match:
                        value = match.group(1).replace('.', '').replace(',', '.')
                        try:
                            numeric_value = float(value)
                            plans[plan_name] = f"{numeric_value:,.2f}".replace(",", "_").replace(".", ",").replace("_", ".")
                            self.logger.info(f"‚úÖ Encontrado {plan_name}: {plans[plan_name]} (l√≠nea: {match.group(1)})")
                        except Exception:
                            plans[plan_name] = match.group(1)
                            self.logger.info(f"‚úÖ Encontrado {plan_name}: {plans[plan_name]} (valor original)")
                        break
            return plans
        except Exception as e:
            self.logger.error(f"Error extrayendo valores de Allianz desde logs: {e}")
            return plans
    """Consolidador de cotizaciones de Sura y Allianz."""
    
    def __init__(self):
        self.logger = LoggerFactory.create_logger('consolidator')
        self.base_path = Path(__file__).parent.parent.parent
        self.consolidados_path = self.base_path / "Consolidados"
        self.downloads_path = self.base_path / "downloads"
        
        # Inicializar configuraci√≥n de f√≥rmulas
        self.formulas_config = FormulasConfig()
        
        # Inicializar manejador de plantillas
        self.template_handler = TemplateHandler()
        
        # Crear directorio si no existe
        self.consolidados_path.mkdir(exist_ok=True)
        
    def generate_filename(self) -> str:
        """Genera un nombre √∫nico para el archivo basado en la fecha actual."""
        today = datetime.now()
        base_name = f"Cotizacion{today.strftime('%d-%m-%y')}"
        extension = ".xlsx"
        
        # Verificar si el archivo ya existe y generar nombre √∫nico
        counter = 0
        filename = f"{base_name}{extension}"
        full_path = self.consolidados_path / filename
        
        while full_path.exists():
            counter += 1
            filename = f"{base_name}({counter}){extension}"
            full_path = self.consolidados_path / filename
            
        return filename
    
    def extract_sura_data(self) -> Dict[str, Any]:
        """Extrae los datos de configuraci√≥n de Sura."""
        self.logger.info("Extrayendo datos de configuraci√≥n de Sura...")
        
        sura_data = {
            'CLIENT_DOCUMENT_NUMBER': ClientConfig.CLIENT_DOCUMENT_NUMBER,
            'CLIENT_DOCUMENT_TYPE': ClientConfig.get_client_document_type('sura'),
            'CLIENT_FIRST_NAME': ClientConfig.CLIENT_FIRST_NAME,
            'CLIENT_SECOND_NAME': ClientConfig.CLIENT_SECOND_NAME,
            'CLIENT_FIRST_LASTNAME': ClientConfig.CLIENT_FIRST_LASTNAME,
            'CLIENT_SECOND_LASTNAME': ClientConfig.CLIENT_SECOND_LASTNAME,
            'CLIENT_BIRTH_DATE': ClientConfig.get_client_birth_date('sura'),
            'CLIENT_GENDER': ClientConfig.CLIENT_GENDER,
            'CLIENT_PHONE': getattr(ClientConfig, 'CLIENT_PHONE', ''),
            'CLIENT_EMAIL': getattr(ClientConfig, 'CLIENT_EMAIL', ''),
            'CLIENT_EMAIL_TYPE': getattr(ClientConfig, 'CLIENT_EMAIL_TYPE', ''),
            'CLIENT_OCCUPATION': ClientConfig.CLIENT_OCCUPATION,
            'CLIENT_ADDRESS': ClientConfig.CLIENT_ADDRESS,
            'CLIENT_PHONE_WORK': ClientConfig.CLIENT_PHONE_WORK,
            'CLIENT_CITY': ClientConfig.get_client_city('sura'),
            'POLIZA_NUMBER': ClientConfig.get_policy_number('sura'),
            'VEHICLE_CATEGORY': ClientConfig.VEHICLE_CATEGORY,
            'VEHICLE_STATE': ClientConfig.VEHICLE_STATE,
            'VEHICLE_MODEL_YEAR': ClientConfig.VEHICLE_MODEL_YEAR,
            'VEHICLE_BRAND': ClientConfig.VEHICLE_BRAND,
            'VEHICLE_REFERENCE': ClientConfig.VEHICLE_REFERENCE,
            'VEHICLE_FULL_REFERENCE': ClientConfig.VEHICLE_FULL_REFERENCE,
        }
        
        return sura_data
    
    def get_valor_asegurado(self) -> Optional[str]:
        """
        Obtiene el valor asegurado seg√∫n el tipo de cliente.
        Para clientes nuevos: desde ClientConfig
        Para clientes usados: desde ClientConfig (ya extra√≠do por Allianz)
        """
        try:
            # Obtener valor desde ClientConfig (ya sea ingresado manualmente o extra√≠do)
            valor = ClientConfig.get_vehicle_insured_value()
            
            if valor and valor.strip():
                # Limpiar el valor (quitar caracteres no num√©ricos excepto comas y puntos)
                valor_limpio = ''.join(c for c in valor if c.isdigit() or c in '.,')
                return valor_limpio
            else:
                self.logger.warning("‚ö†Ô∏è No se encontr√≥ valor asegurado en la configuraci√≥n")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Error obteniendo valor asegurado: {e}")
            return None
    
    def calculate_bolivar_solidaria_plans(self) -> Dict[str, str]:
        """Calcula las cotizaciones de Bol√≠var y Solidaria usando las f√≥rmulas configuradas."""
        self.logger.info("üí∞ Calculando cotizaciones de Bol√≠var y Solidaria...")
        
        plans = {
            'Bol√≠var': 'No calculado',
            'Bol√≠var Prorrateado': 'No calculado',
            'Solidaria': 'No calculado',
            'Solidaria Prorrateado': 'No calculado'
        }
        
        # Obtener valor asegurado
        valor_asegurado = self.get_valor_asegurado()
        if not valor_asegurado:
            self.logger.warning("‚ö†Ô∏è No se puede calcular Bol√≠var y Solidaria: valor asegurado no disponible")
            return plans
        
        self.logger.info(f"üí∞ Calculando con valor asegurado: {valor_asegurado}")
        
        # Calcular Bol√≠var
        try:
            bolivar_result = self.formulas_config.calculate_cotizacion('bolivar', valor_asegurado)
            if bolivar_result is not None:
                plans['Bol√≠var'] = f"{bolivar_result:,.0f}".replace(",", ".")
                self.logger.info(f"‚úÖ Bol√≠var calculado: ${plans['Bol√≠var']}")
                
                # Calcular valor prorrateado de Bol√≠var
                bolivar_prorrateado = self.formulas_config.calculate_valor_prorrateado('bolivar', bolivar_result)
                if bolivar_prorrateado is not None:
                    plans['Bol√≠var Prorrateado'] = f"{bolivar_prorrateado:,.0f}".replace(",", ".")
                    self.logger.info(f"üìÖ Bol√≠var prorrateado: ${plans['Bol√≠var Prorrateado']}")
                    
                    # Log del c√°lculo detallado
                    config_bolivar = self.formulas_config.get_formula_config('bolivar')
                    fecha_vigencia = config_bolivar.get('fecha_fin_vigencia', '')
                    from datetime import datetime, date
                    try:
                        fecha_vig = datetime.strptime(fecha_vigencia, '%Y-%m-%d').date()
                        dias = (fecha_vig - date.today()).days
                        self.logger.info(f"üìä C√°lculo Bol√≠var: ({bolivar_result:,.0f}/365)*{dias} = {bolivar_prorrateado:,.0f}")
                    except:
                        pass
                else:
                    self.logger.warning("‚ö†Ô∏è Error calculando Bol√≠var prorrateado")
            else:
                self.logger.warning("‚ö†Ô∏è Error calculando cotizaci√≥n de Bol√≠var")
        except Exception as e:
            self.logger.error(f"‚ùå Error calculando Bol√≠var: {e}")
        
        # Calcular Solidaria con tasa autom√°tica
        try:
            # Obtener informaci√≥n del cliente para tasa autom√°tica
            # Usar client_department si est√° disponible, sino usar client_city como fallback
            departamento = getattr(ClientConfig, 'CLIENT_DEPARTMENT', None) or getattr(ClientConfig, 'CLIENT_CITY', None)
            a√±o_vehiculo = getattr(ClientConfig, 'VEHICLE_MODEL_YEAR', None)
            
            # Intentar usar tasa autom√°tica si tenemos la informaci√≥n necesaria
            if departamento and a√±o_vehiculo:
                try:
                    a√±o_vehiculo_int = int(a√±o_vehiculo)
                    solidaria_result = self.formulas_config.calculate_cotizacion('solidaria', valor_asegurado, departamento, a√±o_vehiculo_int)
                    
                    # Obtener la tasa que se us√≥ para el log
                    tasa_usada = self.formulas_config.get_tasa_solidaria_automatica(departamento, a√±o_vehiculo_int)
                    self.logger.info(f"üéØ Solidaria usando tasa autom√°tica: {tasa_usada}% para {departamento}, veh√≠culo {a√±o_vehiculo}")
                    
                except (ValueError, TypeError):
                    # Fallback a tasa manual si hay error en la conversi√≥n
                    solidaria_result = self.formulas_config.calculate_cotizacion('solidaria', valor_asegurado)
                    self.logger.warning(f"‚ö†Ô∏è Error procesando datos autom√°ticos, usando tasa manual para Solidaria")
            else:
                # Usar tasa manual si no tenemos la informaci√≥n necesaria
                solidaria_result = self.formulas_config.calculate_cotizacion('solidaria', valor_asegurado)
                falta_info = []
                if not departamento:
                    falta_info.append("departamento")
                if not a√±o_vehiculo:
                    falta_info.append("a√±o del veh√≠culo")
                self.logger.warning(f"‚ö†Ô∏è Informaci√≥n faltante para tasa autom√°tica ({', '.join(falta_info)}), usando tasa manual para Solidaria")
            
            if solidaria_result is not None:
                plans['Solidaria'] = f"{solidaria_result:,.0f}".replace(",", ".")
                self.logger.info(f"‚úÖ Solidaria calculado: ${plans['Solidaria']}")
                
                # Calcular valor prorrateado de Solidaria
                solidaria_prorrateado = self.formulas_config.calculate_valor_prorrateado('solidaria', solidaria_result)
                if solidaria_prorrateado is not None:
                    plans['Solidaria Prorrateado'] = f"{solidaria_prorrateado:,.0f}".replace(",", ".")
                    self.logger.info(f"üìÖ Solidaria prorrateado: ${plans['Solidaria Prorrateado']}")
                    
                    # Log del c√°lculo detallado
                    config_solidaria = self.formulas_config.get_formula_config('solidaria')
                    fecha_vigencia = config_solidaria.get('fecha_fin_vigencia', '')
                    from datetime import datetime, date
                    try:
                        fecha_vig = datetime.strptime(fecha_vigencia, '%Y-%m-%d').date()
                        dias = (fecha_vig - date.today()).days
                        self.logger.info(f"üìä C√°lculo Solidaria: ({solidaria_result:,.0f}/365)*{dias} = {solidaria_prorrateado:,.0f}")
                    except:
                        pass
                else:
                    self.logger.warning("‚ö†Ô∏è Error calculando Solidaria prorrateado")
            else:
                self.logger.warning("‚ö†Ô∏è Error calculando cotizaci√≥n de Solidaria")
        except Exception as e:
            self.logger.error(f"‚ùå Error calculando Solidaria: {e}")
        
        return plans
    
    def extract_sura_plans_from_logs(self) -> Dict[str, str]:
        """Extrae los valores de los planes de Sura desde los logs de la automatizaci√≥n, incluyendo P√©rdida Parcial 10-1 SMLMV."""
        self.logger.info("üìä Extrayendo valores de planes de Sura desde logs...")
        plans = {
            'Plan Autos Global': 'No encontrado',
            'P√©rdida Parcial 10-1 SMLMV': 'No encontrado',
            'Plan Autos Clasico': 'No encontrado'
        }
        try:
            sura_log_path = self.base_path / "LOGS" / "sura" / "sura.log"
            if not sura_log_path.exists():
                self.logger.warning("No se encontr√≥ el archivo de log de Sura")
                return plans
            with open(sura_log_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            recent_lines = lines[-500:] if len(lines) > 500 else lines
            # Patrones para buscar los valores en los logs
            patterns = {
                'Plan Autos Global': [
                    r'Global:\s*\$([0-9,.]+)',
                    r'Prima Plan Global:\s*\$([0-9,.]+)',
                    r'prima_global[\'\"]\s*:\s*([0-9,.]+)'
                ],
                'P√©rdida Parcial 10-1 SMLMV': [
                    r'tras 10-1 SMLMV:\s*\$([0-9,.]+)',
                    r'P√©rdida Parcial 10-1 SMLMV:\s*\$([0-9,.]+)',
                    r'prima_10_1[\'\"]\s*:\s*([0-9,.]+)'
                ],
                'Plan Autos Clasico': [
                    r'Cl√°sico:\s*\$([0-9,.]+)',
                    r'Prima Plan Autos Cl√°sico:\s*\$([0-9,.]+)',
                    r'prima_clasico[\'\"]\s*:\s*([0-9,.]+)'
                ]
            }
            for plan_name, plan_patterns in patterns.items():
                for line in reversed(recent_lines):
                    for pattern in plan_patterns:
                        match = re.search(pattern, line, re.IGNORECASE)
                        if match:
                            value = match.group(1).replace(',', '').replace('.', '')
                            if value.isdigit():
                                plans[plan_name] = f"{int(value):,}".replace(",", ".")
                                self.logger.info(f"‚úÖ Encontrado {plan_name}: ${plans[plan_name]}")
                                break
                    if plans[plan_name] != 'No encontrado':
                        break
            return plans
        except Exception as e:
            self.logger.error(f"Error extrayendo valores de Sura desde logs: {e}")
            return plans


    

    
    def create_excel_report(self, sura_data: Dict[str, Any], sura_plans: Dict[str, str], 
                          allianz_plans: Dict[str, str], bolivar_solidaria_plans: Dict[str, str]) -> str:
        """Crea el reporte Excel consolidado. Si hay un fondo seleccionado, usa plantilla, sino usa el formato anterior."""
        
        # Verificar si hay un fondo seleccionado
        selected_fondo = ClientConfig.get_selected_fondo()
        
        if selected_fondo and selected_fondo in self.template_handler.get_available_fondos():
            # Usar plantilla del fondo
            self.logger.info(f"üìã Usando plantilla de {selected_fondo}")
            return self.template_handler.create_consolidado_from_template(
                selected_fondo, sura_data, sura_plans, allianz_plans, bolivar_solidaria_plans
            )
        else:
            # Usar formato anterior (consolidado est√°ndar)
            if selected_fondo:
                self.logger.warning(f"‚ö†Ô∏è Fondo '{selected_fondo}' no disponible, usando formato est√°ndar")
            else:
                self.logger.info("üìä No hay fondo seleccionado, usando formato est√°ndar")
            
            return self._create_standard_excel_report(sura_data, sura_plans, allianz_plans, bolivar_solidaria_plans)
    
    def _create_standard_excel_report(self, sura_data: Dict[str, Any], sura_plans: Dict[str, str], 
                          allianz_plans: Dict[str, str], bolivar_solidaria_plans: Dict[str, str]) -> str:
        """Crea el reporte Excel consolidado con estructura est√°ndar (formato anterior)."""
        filename = self.generate_filename()
        file_path = self.consolidados_path / filename
        
        self.logger.info(f"üìä Creando reporte Excel consolidado est√°ndar: {filename}")
        
        # Obtener valor asegurado
        valor_asegurado = self.get_valor_asegurado()
        valor_asegurado_formatted = f"${valor_asegurado}" if valor_asegurado else "No disponible"
        
        # Crear lista de filas para el Excel consolidado
        rows = []
        
        # === SECCI√ìN 1: DATOS DEL CLIENTE ===
        rows.append({'Categor√≠a': 'DATOS DEL CLIENTE', 'Campo': '', 'Valor': ''})
        client_fields = [
            ('N√∫mero de Documento', 'CLIENT_DOCUMENT_NUMBER'),
            ('Tipo de Documento', 'CLIENT_DOCUMENT_TYPE'),
            ('Primer Nombre', 'CLIENT_FIRST_NAME'),
            ('Segundo Nombre', 'CLIENT_SECOND_NAME'),
            ('Primer Apellido', 'CLIENT_FIRST_LASTNAME'),
            ('Segundo Apellido', 'CLIENT_SECOND_LASTNAME'),
            ('Fecha de Nacimiento', 'CLIENT_BIRTH_DATE'),
            ('G√©nero', 'CLIENT_GENDER'),
            ('Ocupaci√≥n', 'CLIENT_OCCUPATION'),
            ('Tel√©fono', 'CLIENT_PHONE'),
            ('Email', 'CLIENT_EMAIL')
        ]
        
        for display_name, config_key in client_fields:
            value = sura_data.get(config_key, 'No disponible')
            rows.append({'Categor√≠a': '', 'Campo': display_name, 'Valor': value})
        
        # === SECCI√ìN 2: DATOS DE DIRECCI√ìN ===
        rows.append({'Categor√≠a': '', 'Campo': '', 'Valor': ''})
        rows.append({'Categor√≠a': 'DATOS DE DIRECCI√ìN', 'Campo': '', 'Valor': ''})
        address_fields = [
            ('Direcci√≥n', 'CLIENT_ADDRESS'),
            ('Tel√©fono de Trabajo', 'CLIENT_PHONE_WORK'),
            ('Ciudad', 'CLIENT_CITY')
        ]
        
        for display_name, config_key in address_fields:
            value = sura_data.get(config_key, 'No disponible')
            rows.append({'Categor√≠a': '', 'Campo': display_name, 'Valor': value})
        
        # === SECCI√ìN 3: DATOS DEL VEH√çCULO ===
        rows.append({'Categor√≠a': '', 'Campo': '', 'Valor': ''})
        rows.append({'Categor√≠a': 'DATOS DEL VEH√çCULO', 'Campo': '', 'Valor': ''})
        vehicle_fields = [
            ('Categor√≠a', 'VEHICLE_CATEGORY'),
            ('Estado', 'VEHICLE_STATE'),
            ('A√±o del Modelo', 'VEHICLE_MODEL_YEAR'),
            ('Marca', 'VEHICLE_BRAND'),
            ('Referencia', 'VEHICLE_REFERENCE'),
            ('Referencia Completa', 'VEHICLE_FULL_REFERENCE')
        ]
        
        for display_name, config_key in vehicle_fields:
            value = sura_data.get(config_key, 'No disponible')
            rows.append({'Categor√≠a': '', 'Campo': display_name, 'Valor': value})
        
        # A√±adir valor asegurado
        rows.append({'Categor√≠a': '', 'Campo': 'Valor Asegurado', 'Valor': valor_asegurado_formatted})
        
        # === SECCI√ìN 4: COTIZACIONES ===
        rows.append({'Categor√≠a': '', 'Campo': '', 'Valor': ''})
        rows.append({'Categor√≠a': 'COTIZACIONES POR ASEGURADORA', 'Campo': '', 'Valor': ''})
        
        # SURA
        rows.append({'Categor√≠a': '', 'Campo': '', 'Valor': ''})
        rows.append({'Categor√≠a': 'SURA', 'Campo': '', 'Valor': ''})
        
        # Exportar seg√∫n tipo de veh√≠culo
        if sura_data.get('VEHICLE_STATE', '').lower() == 'usado':
            # Usado: mostrar los 3 valores
            sura_plan_map = [
                ("Plan Autos Global", sura_plans.get("Plan Autos Global")),
                ("P√©rdida Parcial 10-1 SMLMV", sura_plans.get("P√©rdida Parcial 10-1 SMLMV")),
                ("Plan Autos Cl√°sico", sura_plans.get("Plan Autos Clasico")),
            ]
        else:
            # Nuevo: solo global y cl√°sico
            sura_plan_map = [
                ("Plan Autos Global", sura_plans.get("Plan Autos Global")),
                ("Plan Autos Cl√°sico", sura_plans.get("Plan Autos Clasico")),
            ]
        
        for plan_name, plan_value in sura_plan_map:
            formatted_value = f"${plan_value}" if plan_value not in [None, 'No encontrado'] else (plan_value if plan_value is not None else 'No encontrado')
            rows.append({'Categor√≠a': '', 'Campo': plan_name, 'Valor': formatted_value})
        
        # ALLIANZ
        rows.append({'Categor√≠a': '', 'Campo': '', 'Valor': ''})
        rows.append({'Categor√≠a': 'ALLIANZ', 'Campo': '', 'Valor': ''})
        allianz_plan_names = [
            'Autos Esencial',
            'Autos Esencial + Totales',
            'Autos Plus',
            'Autos Llave en Mano'
        ]
        
        for plan_name in allianz_plan_names:
            plan_value = allianz_plans.get(plan_name, 'No encontrado')
            formatted_value = f"${plan_value}" if plan_value != 'No encontrado' else plan_value
            rows.append({'Categor√≠a': '', 'Campo': plan_name, 'Valor': formatted_value})
        
        # BOL√çVAR Y SOLIDARIA
        rows.append({'Categor√≠a': '', 'Campo': '', 'Valor': ''})
        rows.append({'Categor√≠a': 'BOL√çVAR', 'Campo': '', 'Valor': ''})
        
        # Bol√≠var - Cotizaci√≥n normal
        bolivar_value = bolivar_solidaria_plans.get('Bol√≠var', 'No calculado')
        formatted_bolivar = f"${bolivar_value}" if bolivar_value != 'No calculado' else bolivar_value
        rows.append({'Categor√≠a': '', 'Campo': 'Cotizaci√≥n Calculada', 'Valor': formatted_bolivar})
        
        # Bol√≠var - Valor prorrateado
        bolivar_prorrateado_value = bolivar_solidaria_plans.get('Bol√≠var Prorrateado', 'No calculado')
        formatted_bolivar_prorrateado = f"${bolivar_prorrateado_value}" if bolivar_prorrateado_value != 'No calculado' else bolivar_prorrateado_value
        rows.append({'Categor√≠a': '', 'Campo': 'Valor Prorrateado', 'Valor': formatted_bolivar_prorrateado})
        
        rows.append({'Categor√≠a': '', 'Campo': '', 'Valor': ''})
        rows.append({'Categor√≠a': 'SOLIDARIA', 'Campo': '', 'Valor': ''})
        
        # Solidaria - Cotizaci√≥n normal
        solidaria_value = bolivar_solidaria_plans.get('Solidaria', 'No calculado')
        formatted_solidaria = f"${solidaria_value}" if solidaria_value != 'No calculado' else solidaria_value
        rows.append({'Categor√≠a': '', 'Campo': 'Cotizaci√≥n Calculada', 'Valor': formatted_solidaria})
        
        # Solidaria - Valor prorrateado
        solidaria_prorrateado_value = bolivar_solidaria_plans.get('Solidaria Prorrateado', 'No calculado')
        formatted_solidaria_prorrateado = f"${solidaria_prorrateado_value}" if solidaria_prorrateado_value != 'No calculado' else solidaria_prorrateado_value
        rows.append({'Categor√≠a': '', 'Campo': 'Valor Prorrateado', 'Valor': formatted_solidaria_prorrateado})
        
        # Crear DataFrame
        df = pd.DataFrame(rows)
        
        # Escribir a Excel con una sola hoja
        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='COTIZACION_CONSOLIDADA', index=False)
        
        self.logger.info(f"üìä Reporte Excel consolidado creado exitosamente: {filename}")
        return str(file_path)
    
    def consolidate_with_failures(self, automation_results: Dict[str, bool]) -> bool:
        """
        Ejecuta el proceso de consolidaci√≥n incluso si algunas automatizaciones fallaron.
        
        Args:
            automation_results: Dict con resultados de automatizaciones {'allianz': True/False, 'sura': True/False}
        """
        try:
            self.logger.info("Iniciando proceso de consolidaci√≥n con posibles fallos...")
            self.logger.info(f"Resultados de automatizaci√≥n: {automation_results}")
            
            # 1. Extraer datos de configuraci√≥n de Sura (siempre intentar)
            sura_data = self.extract_sura_data()
            
            # 2. Extraer planes seg√∫n el √©xito de cada automatizaci√≥n
            if automation_results.get('sura', False):
                # Sura exitosa: extraer desde logs
                sura_plans = self.extract_sura_plans_from_logs()
            else:
                # Sura fall√≥: llenar con "FALL√ì"
                self.logger.warning("‚ùå Sura fall√≥, llenando planes con 'FALL√ì'")
                sura_plans = {
                    'A TODO RIESGO C/D 15%': 'FALL√ì',
                    'A TODO RIESGO C/D 10%': 'FALL√ì',
                    'RESPONSABILIDAD CIVIL + PT + HU': 'FALL√ì'
                }
            
            if automation_results.get('allianz', False):
                # Allianz exitosa: extraer normalmente
                allianz_plans = self.extract_allianz_plans_from_logs()
            else:
                # Allianz fall√≥: llenar con "FALL√ì"
                self.logger.warning("‚ùå Allianz fall√≥, llenando planes con 'FALL√ì'")
                allianz_plans = {
                    'Autos Esencial': 'FALL√ì',
                    'Autos Plus': 'FALL√ì',
                    'Autos Llave en Mano': 'FALL√ì',
                    'Autos Esencial + Totales': 'FALL√ì'
                }
            
            self.logger.info(f"Planes de Sura: {sura_plans}")
            self.logger.info(f"Planes de Allianz: {allianz_plans}")
            
            # 4. Calcular cotizaciones de Bol√≠var y Solidaria (siempre posible)
            bolivar_solidaria_plans = self.calculate_bolivar_solidaria_plans()
            
            # 5. Crear reporte Excel consolidado
            excel_path = self.create_excel_report(sura_data, sura_plans, allianz_plans, bolivar_solidaria_plans)
            
            self.logger.info(f"Consolidaci√≥n con fallos completada. Archivo: {excel_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"Error durante la consolidaci√≥n con fallos: {e}")
            return False

    def consolidate(self) -> bool:
        """Ejecuta el proceso de consolidaci√≥n completo."""
        try:
            self.logger.info("Iniciando proceso de consolidaci√≥n...")
            
            # 1. Extraer datos de configuraci√≥n de Sura
            sura_data = self.extract_sura_data()
            
            # 2. Extraer planes de Sura desde logs √∫nicamente
            sura_plans = self.extract_sura_plans_from_logs()
            self.logger.info(f"Planes de Sura: {sura_plans}")
            
            # 3. Extraer planes de Allianz desde logs √∫nicamente
            allianz_plans = self.extract_allianz_plans_from_logs()
            
            # 4. Calcular cotizaciones de Bol√≠var y Solidaria
            bolivar_solidaria_plans = self.calculate_bolivar_solidaria_plans()
            
            # 5. Crear reporte Excel consolidado
            excel_path = self.create_excel_report(sura_data, sura_plans, allianz_plans, bolivar_solidaria_plans)
            
            self.logger.info(f"Consolidaci√≥n completada exitosamente. Archivo: {excel_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"Error durante la consolidaci√≥n: {e}")
            return False


def main():
    """Funci√≥n principal para ejecutar la consolidaci√≥n."""
    consolidator = CotizacionConsolidator()
    success = consolidator.consolidate()
    
    if success:
        print("‚úÖ Consolidaci√≥n completada exitosamente")
        return 0
    else:
        print("‚ùå Error durante la consolidaci√≥n")
        return 1


if __name__ == "__main__":
    import sys
    sys.exit(main())
